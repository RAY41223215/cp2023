var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/mdecycu/cmsite  \n', 'tags': '', 'url': 'About.html'}, {'title': 'week5', 'text': '\n // 包含標準輸出入程式庫的標頭文件\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu\n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit\n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n\xa0\xa0\n// 主函式\nint main() {\n\xa0\xa0\xa0\xa0// Start a Gnuplot process using popen\n\xa0\xa0\xa0\xa0FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n\xa0\xa0\xa0\xa0if (!gnuplotPipe) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(stderr, "Failed to start Gnuplot.\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return 1;\n\xa0\xa0\xa0\xa0}\n\xa0\xa0\n\xa0\xa0\xa0\xa0// Use Gnuplot plotting commands, specify font and output as PNG\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "plot sin(x)");\n\xa0\xa0\xa0\xa0// Close popen\n\xa0\xa0\xa0\xa0pclose(gnuplotPipe);\n\xa0\xa0\n\xa0\xa0\xa0\xa0return 0;\n} \n \n \n', 'tags': '', 'url': 'week5.html'}, {'title': 'week6', 'text': '// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China\n// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621\n// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library\n// https://www.rapidtables.com/web/color/RGB_Color.html\n// 幾何形狀著色與繪圖練習\n// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖\n#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n// width 3: height 2\nint width = 1200;\n// 國旗長寬比為 3:2\nint height = (int)(width*2.0 / 3.0);\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_roc_flag(img);\n\nFILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\nint center_x = (int)(width/4);\nint center_y = (int)(height/4);\n// gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n// 由於中央白日圓形的半徑為青天寬度的 1/8\n// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\nint sun_radius = (int)(width/8);\n// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\nint white_circle_dia = sun_radius;\n// 中央藍色圓形半徑為中央白日的 1又 2/15\nint blue_circle_dia = white_circle_dia + white_circle_dia*2/15;\n// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\nred = gdImageColorAllocate(img, 255, 0, 0); // 紅色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n// 根據畫布大小塗上紅色長方形區域\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n// 青天面積為整面國旗的 1/4, 也是採用長方形塗色\ngdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n// 先設法以填色畫出六個白色堆疊菱形\ndraw_white_sun(img, center_x, center_y, sun_radius, white);\n// 利用一個藍色大圓與白色小圓畫出藍色環狀\ngdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\ngdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n}\n\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\n// M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位\n// 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度\nfloat deg = M_PI/180;\n// 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度\n// 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小\nfloat sr = sun_radius/tan(75*deg);\nint ax, ay, bx, by, dx, dy, ex, ey;\ngdPoint points[4];\n/* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確\nax = center_x;\nay = center_y - sun_radius;\nbx = center_x - sun_radius*tan(15*deg);\nby = center_y;\nex = center_x;\ney = center_y + sun_radius;\ndx = center_x + sun_radius*tan(15*deg);\ndy = center_y;\n// AB\ngdImageLine(img, ax, ay, bx, by, color);\n// BE\ngdImageLine(img, bx, by, ex, ey, color);\n// ED\ngdImageLine(img, ex, ey, dx, dy, color);\n// DA\ngdImageLine(img, dx, dy, ax, ay, color);\n*/\nax = center_x;\nay = center_y - sun_radius;\nbx = center_x - sun_radius*tan(15*deg);\nby = center_y;\nex = center_x;\ney = center_y + sun_radius;\ndx = center_x + sun_radius*tan(15*deg);\ndy = center_y;\n// 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域\nfor (int i=1;i<=6;i++){\n// A\npoints[0].x = ax+sun_radius*sin(30*deg*i);\npoints[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);\n// B\npoints[1].x = bx+sr-sr*cos(30*deg*i);\npoints[1].y = by-sr*sin(30*deg*i);\n// E\npoints[2].x = ex-sun_radius*sin(30*deg*i);\npoints[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));\n// D\npoints[3].x = dx-(sr-sr*cos(30*deg*i));\npoints[3].y = dy+sr*sin(30*deg*i);\n// 對菱形區域範圍塗色\ngdImageFilledPolygon(img, points, 4, color);\n// 在菱形區域外圍畫線, 明確界定菱形範圍\ngdImagePolygon(img, points, 4, color);\n} \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nint main() {\nint width = 800;\nint height = (int)(width / 1.9);\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_usa_flag(img);\n\nFILE *outputFile = fopen("./../images/usa_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "打开输出文件时出错。\\n");\nreturn 1;\n}\n\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\n\nreturn 0;\n}\n\nvoid draw_usa_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 国旗颜色\nred = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹\nblue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形\n\nint stripe_height = 33 ;\nint stripe_width = width ;\nint star_size = (int)(0.0308 * height); // 星星大小\n\nfor (int y = 0; y < height; y += stripe_height) {\nif (y / stripe_height % 2 == 0) {\ngdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n} else {\ngdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n}\n}\n\ngdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 698 / 100, blue);\n\nint star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距\nint star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距\nint star_start_x = (int)(0.125 * height); // 星星的起始X位置\nint star_start_y = (int)(0.06 * height); // 星星的起始Y位置\n\nfor (int row = 0; row < 9; row++) {\nint starsPerRow = (row % 2 == 0) ? 6 : 5;\n\n// 计算2、4、6和8排星星的偏移量\nint offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;\n\nfor (int star = 0; star < starsPerRow; star++) {\nint x = star_start_x + star * star_spacing_x + offset_x;\n\n// 旋转角度（以弧度为单位）\ndouble rotation_angle = M_PI / 5; // 忘記多少度的旋转\n\nint y = star_start_y + row * star_spacing_y;\ndraw_star(img, x, y, star_size, white, rotation_angle);\n}\n}\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\ngdPoint points[10];\n\nfor (int i = 0; i < 10; i++) {\ndouble angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;\nint radius = (i % 2 == 0) ? size : size / 2;\npoints[i].x = x + radius * cos(angle);\npoints[i].y = y + radius * sin(angle);\n}\n\n// 用指定的颜色填充星星\ngdImageFilledPolygon(img, points, 10, color);\n} \n \n \n', 'tags': '', 'url': 'week6.html'}, {'title': 'week7', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_chinese_flag(gdImagePtr img);\n\nint main() {\nint width = 300; // 國旗寬度\nint height = 200; // 國旗高度\n\ngdImagePtr im = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(im, 0);\n\ndraw_chinese_flag(im);\n\nFILE *outputFile = fopen("./../images/proc_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "打开输出文件时出错。\\n");\nreturn 1;\n}\n\ngdImagePngEx(im, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(im);\n\nreturn 0;\n}\n\n// 声明 draw_star 函数\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nvoid draw_chinese_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, yellow;\n\n// 國旗顏色\nred = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景\nyellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星\n\n// 畫紅色背景\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n\n// 設置星星的大小和位置\nint star_size = (int)(0.28 * height);\nint star_x = (int)(0.165 * width);\nint star_y = (int)(0.265 * height);\n\n// 畫大星星\ndraw_star(img, star_x, star_y, star_size, yellow, 11.0);\n\n// 繪製小星星，位置根據實際國旗比例計算\ndouble radius = 0.15 * height;\ndouble angle = 360 / 7 * M_PI / 179.0;\ndouble rotation = -M_PI / 7.5;\nint cx = (int)(0.32 * width);\nint cy = (int)(0.27 * height);\n\nfor (int i = -1; i < 3; i++) {\nint x = (int)(cx + radius * cos(i * angle + rotation));\nint y = (int)(cy + radius * sin(i * angle + rotation));\ndraw_star(img, x, y, 19, yellow, M_PI / 5.0);\n}\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\ngdPoint points[10];\n\n// 计算星形的五个外点和五个内点\ndouble outer_radius = size / 2;\ndouble inner_radius = size / 6;\ndouble angle = M_PI / 5.0;\n\nfor (int i = 0; i < 10; i++) {\ndouble radius = (i % 2 == 0) ? outer_radius : inner_radius;\ndouble theta = rotation_angle + i * angle;\npoints[i].x = x + radius * cos(theta);\npoints[i].y = y + radius * sin(theta);\n}\n\n// 使用 gdImageFilledPolygon 绘制星形\ngdImageFilledPolygon(img, points, 10, color);\n} \n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_uk_flag(gdImagePtr img);\nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);\n\nint main() {\n// 设置国旗的宽和高\nint width = 1200;\nint height = width / 2;\n\n// 创建图像\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\n// 绘制英国国旗\ndraw_uk_flag(img);\n\n// 将图像保存到文件\nFILE *outputFile = fopen("./../images/uk_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "打开输出文件时发生错误。\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\n\n\nvoid draw_uk_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\n\nint red, white, blue;\nred = gdImageColorAllocate(img, 204, 0, 0); // 红色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 153); // 蓝色\n\ngdImageFilledRectangle(img, 0, 0, width, height, blue);\n\n\nint x1, y1, x2, y2, x3, y3;\n{\nint line_thickness = 100;\ngdImageSetThickness(img, line_thickness);\n\nint x1, y1, x2, y2, x3, y3;\n\n// 绘制白色斜线\nx1 = 0;\ny1 = 600;\nx2 = 1200;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, white);\n\nx1 = 0;\ny1 = 0;\nx2 = 1200;\ny2 = 600;\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n{\nint line_thickness = 33;\ngdImageSetThickness(img, line_thickness);\n\n\n// 绘制红色斜线\nx1 = 566;\ny1 = 300;\nx2 = 1166;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, red);\n\nx1 = 1233;\ny1 = 600;\nx2 = 633;\ny2 = 300;\ngdImageLine(img, x1, y1, x2, y2, red);\n\nx1 = 566;\ny1 = 300;\nx2 = -33;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, red);\n\nx1 = 600;\ny1 = 316.5;\nx2 = 0;\ny2 = 616.5;\ngdImageLine(img, x1, y1, x2, y2, red);\n}\n{\nint line_thickness = 33;\ngdImageSetThickness(img, line_thickness);\n\nint x1, y1, x2, y2, x3, y3;\n\n// 绘制 斜线\nx1 = 0;\ny1 = 600;\nx2 = 1200;\ny2 = 0;\ngdImageLine(img, x1, y1, x2, y2, red );\n\n\nx1 = 1200;\ny1 = 16.5;\nx2 = 600;\ny2 = 316.5;\ngdImageLine(img, x1, y1, x2, y2, white);\n\n\nx1 = 0;\ny1 = 583.5;\nx2 = 600;\ny2 = 283.5;\ngdImageLine(img, x1, y1, x2, y2, white);\n\n\n}\n\n// 绘制白色十字\nint cross_width = width / 32;\nint cross_arm_width = width / 32;\nint center_x = width / 2;\nint center_y = height / 2;\n\ngdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);\ngdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);\n\n// 绘制红色十字\ngdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);\ngdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);\n} \n \n \n #include <stdio.h>\n#include <gd.h>\n\nint main() {\n// 國旗尺寸\nint width = 1200;\nint height = 600;\n\n// 創建圖像\ngdImagePtr img = gdImageCreate(width, height);\n\n// 設置白色背景\nint white = gdImageColorAllocate(img, 255, 255, 255);\ngdImageFilledRectangle(img, 0, 0, width, height, white);\n\n// 計算中間紅點的直徑和位置\nint circleDiameter = height * 3 / 5;\nint circleRadius = circleDiameter / 2;\nint circleX = width / 2;\nint circleY = height / 2;\n\n// 設置紅色圓圈\nint red = gdImageColorAllocate(img, 255, 0, 0);\ngdImageFilledEllipse(img, circleX, circleY, circleDiameter, circleDiameter, red);\n\n// 儲存圖像\nFILE *output = fopen("japan_flag.png", "wb");\nif (output == NULL) {\nfprintf(stderr, "Error creating output file\\n");\nreturn 1;\n}\n\ngdImagePng(img, output);\nfclose(output);\n\n// 釋放記憶體\ngdImageDestroy(img);\n\nreturn 0;\n} \n \n \n \n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\xa0\n#define WIDTH 900\n#define HEIGHT 600\n#define FILENAME "south_korea_flag.png"\n\xa0\nint\xa0main() {\n\xa0\xa0\xa0\xa0gdImagePtr im;\n\xa0\xa0\xa0\xa0FILE\xa0*pngout;\n\xa0\xa0\xa0\xa0int\xa0white, black, red, blue;\n\xa0\n\xa0\xa0\xa0\xa0im = gdImageCreate(WIDTH, HEIGHT);\n\xa0\n\xa0\xa0\xa0\xa0white = gdImageColorAllocate(im, 255, 255, 255);\n\xa0\xa0\xa0\xa0black = gdImageColorAllocate(im, 0, 0, 0);\n\xa0\xa0\xa0\xa0red = gdImageColorAllocate(im, 205, 0, 0);\n\xa0\xa0\xa0\xa0blue = gdImageColorAllocate(im, 0, 56, 168);\n\xa0\n\xa0\xa0\xa0\xa0// Background (white)\n\xa0\xa0\xa0\xa0gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);\n\xa0\n\xa0\xa0\xa0\xa0// Blue Circle (Yin-Yang Symbol)\n\xa0\xa0\xa0\xa0gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);\n\xa0\n\xa0\xa0\xa0\xa0// Red Circle (Yin-Yang Symbol)\n\xa0\xa0\xa0\xa0gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);\n\xa0\n\xa0\xa0int\xa0circleX = 385;\xa0\xa0\xa0\xa0// 圓心的 X 座標\n\xa0\xa0int\xa0circleY = 262.5;\xa0\xa0\xa0// 圓心的 Y 座標\n\xa0\xa0int\xa0circleRadius = 75;\xa0\xa0\xa0\xa0\n\xa0\n\xa0\xa0// 繪製圓形\n\xa0\xa0gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);\n\xa0\n\xa0\xa0int\xa0circleX2 = 515;\xa0\xa0\xa0\xa0// 圓心的 X 座標\n\xa0\n\xa0int\xa0circleY2 = 337.5;\n\xa0\n\xa0\xa0// 繪製圓形\n\xa0\xa0gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);\n\xa0\n\xa0\xa0{\n\xa0\n\xa0\n\xa0\xa0// 起點和終點位置\n\xa0\n\xa0\xa0int\xa0startX = 340;\xa0\xa0\xa0\n\xa0\xa0// 線的起點 X 座標\n\xa0\n\xa0\xa0int\xa0startY = 90;\xa0\xa0\n\xa0\xa0// 線的起點 Y 座標\n\xa0\n\xa0\xa0int\xa0endX = 200;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 X 座標\n\xa0\n\xa0\xa0int\xa0endY = 260;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 Y 座標\n\xa0\n\xa0\xa0int\xa0lineWidth = 23;\xa0\xa0// 線的寬度\n\xa0\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX, startY, endX, endY, black);\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);\n\xa0\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);\n\xa0\n\xa0\xa0int\xa0startX2 = 213;\xa0\xa0\xa0\n\xa0\xa0// 線的起點 X 座標\n\xa0\n\xa0\xa0int\xa0startY2 = 270;\xa0\xa0\n\xa0\xa0// 線的起點 Y 座標\n\xa0\n\xa0\xa0int\xa0endX2 = 133;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 X 座標\n\xa0\n\xa0\xa0int\xa0endY2 = 210;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 Y 座標\n\xa0\n\xa0\xa0int\xa0lineWidth2 = 25;\xa0\xa0// 線的寬度\n\xa0\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth +12);\ngdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);\n}\n\xa0\xa0{\n\xa0\xa0\xa0\xa0// 起點和終點位置\n\xa0\n\xa0\xa0int\xa0startX = 330;\xa0\xa0\xa0\n\xa0\xa0// 線的起點 X 座標\n\xa0\n\xa0\xa0int\xa0startY = 520;\xa0\xa0\n\xa0\xa0// 線的起點 Y 座標\n\xa0\n\xa0\xa0int\xa0endX = 190;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 X 座標\n\xa0\n\xa0\xa0int\xa0endY = 350;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 Y 座標\n\xa0\n\xa0\xa0int\xa0lineWidth = 23;\xa0\xa0// 線的寬度\n\xa0\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX, startY, endX, endY, black);\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\xa0\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\xa0\n\xa0\xa0int\xa0startX2 = 213;\xa0\xa0\xa0\n\xa0\xa0// 線的起點 X 座標\n\xa0\n\xa0\xa0int\xa0startY2 = 330;\xa0\xa0\n\xa0\xa0// 線的起點 Y 座標\n\xa0\n\xa0\xa0int\xa0endX2 = 133;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 X 座標\n\xa0\n\xa0\xa0int\xa0endY2 = 390;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 Y 座標\n\xa0\n\xa0\xa0int\xa0lineWidth2 = 25;\xa0\xa0// 線的寬度\n\xa0\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth +8);\n\xa0\xa0gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\xa0\n\xa0\xa0\xa0\xa0gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\xa0\n\xa0\xa0}\n\xa0\n\xa0\xa0{\n\xa0\xa0\xa0\xa0// 起點和終點位置\n\xa0\n\xa0\xa0int\xa0startX = 564;\xa0\xa0\xa0\n\xa0\xa0// 線的起點 X 座標\n\xa0\n\xa0\xa0int\xa0startY = 520;\xa0\xa0\n\xa0\xa0// 線的起點 Y 座標\n\xa0\n\xa0\xa0int\xa0endX = 704;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 X 座標\n\xa0\n\xa0\xa0int\xa0endY = 350;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 Y 座標\n\xa0\n\xa0\xa0int\xa0lineWidth = 23;\xa0\xa0// 線的寬度\n\xa0\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);\n\xa0\n\xa0\xa0\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX, startY, endX, endY, black);\n\xa0\n\xa0\xa0\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);\n\xa0\ngdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 400, 734, 490, white);\n\xa0\n\xa0\xa0int\xa0startX2 = 553;\xa0\xa0\xa0\n\xa0\xa0// 線的起點 X 座標\n\xa0\n\xa0\xa0int\xa0startY2 = 330;\xa0\xa0\n\xa0\xa0// 線的起點 Y 座標\n\xa0\n\xa0\xa0int\xa0endX2 = 633;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 X 座標\n\xa0\n\xa0\xa0int\xa0endY2 = 390;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 Y 座標\n\xa0\n\xa0\xa0int\xa0lineWidth2 = 25;\xa0\xa0// 線的寬度\n\xa0\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth +8);\n\xa0\xa0gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);\n\xa0\xa0}\n\xa0\xa0{\n\xa0\xa0\xa0\xa0// 起點和終點位置\n\xa0\n\xa0\xa0int\xa0startX = 330;\xa0\xa0\xa0\n\xa0\xa0// 線的起點 X 座標\n\xa0\n\xa0\xa0int\xa0startY = 520;\xa0\xa0\n\xa0\xa0// 線的起點 Y 座標\n\xa0\n\xa0\xa0int\xa0endX = 190;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 X 座標\n\xa0\n\xa0\xa0int\xa0endY = 350;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 Y 座標\n\xa0\n\xa0\xa0int\xa0lineWidth = 23;\xa0\xa0// 線的寬度\n\xa0\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX, startY, endX, endY, black);\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\xa0\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\xa0\n\xa0\xa0int\xa0startX2 = 213;\xa0\xa0\xa0\n\xa0\xa0// 線的起點 X 座標\n\xa0\n\xa0\xa0int\xa0startY2 = 330;\xa0\xa0\n\xa0\xa0// 線的起點 Y 座標\n\xa0\n\xa0\xa0int\xa0endX2 = 133;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 X 座標\n\xa0\n\xa0\xa0int\xa0endY2 = 390;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 Y 座標\n\xa0\n\xa0\xa0int\xa0lineWidth2 = 25;\xa0\xa0// 線的寬度\n\xa0\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth +8);\n\xa0\xa0gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\xa0\n\xa0\xa0\xa0\xa0gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\xa0\n\xa0\xa0}\n\xa0\xa0{\n\xa0\xa0\xa0\xa0// 起點和終點位置\n\xa0\n\xa0\xa0int\xa0startX = 564;\xa0\xa0\xa0\n\xa0\xa0// 線的起點 X 座標\n\xa0\n\xa0\xa0int\xa0startY = 97;\xa0\xa0\n\xa0\xa0// 線的起點 Y 座標\n\xa0\n\xa0\xa0int\xa0endX = 704;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 X 座標\n\xa0\n\xa0\xa0int\xa0endY = 267;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 Y 座標\n\xa0\n\xa0\xa0int\xa0lineWidth = 23;\xa0\xa0// 線的寬度\n\xa0\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);\n\xa0\n\xa0\xa0\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX, startY, endX, endY, black);\n\xa0\n\xa0\xa0\xa0\xa0gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 212, 734, 118, white);\n\xa0\n\xa0\xa0\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth);\n\xa0\xa0gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);\n\xa0\n\xa0\xa0int\xa0startX2 = 553;\xa0\xa0\xa0\n\xa0\xa0// 線的起點 X 座標\n\xa0\n\xa0\xa0int\xa0startY2 = 277;\xa0\xa0\n\xa0\xa0// 線的起點 Y 座標\n\xa0\n\xa0\xa0int\xa0endX2 = 633;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 X 座標\n\xa0\n\xa0\xa0int\xa0endY2 = 217;\xa0\xa0\xa0\xa0\n\xa0\xa0// 線的終點 Y 座標\n\xa0\n\xa0\xa0int\xa0lineWidth2 = 25;\xa0\xa0// 線的寬度\n\xa0\n\xa0\xa0// 繪製線段\n\xa0\xa0gdImageSetThickness(im, lineWidth +8);\n\xa0\xa0gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);\n\xa0\n\xa0\xa0gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);\n\xa0\n\xa0\xa0\xa0\xa0gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);\n\xa0\n\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0// Save image\nFILE\xa0*outputFile =\xa0fopen("./../images/korea_flag.png",\xa0"wb");\nif\xa0(outputFile == NULL) {\n\xa0\xa0\xa0\xa0fprintf(stderr,\xa0"Error opening the output file.\\n");\n\xa0\xa0\xa0\xa0return\xa01;\n}\n\xa0\xa0gdImagePngEx(im, outputFile, 9);\n\xa0\xa0\xa0\xa0\xa0\xa0fclose(outputFile);\n\xa0\xa0\xa0\xa0\xa0\xa0gdImageDestroy(im);\n\xa0\xa0\xa0\xa0\xa0\xa0return\xa00;\n\xa0\xa0}\n \n \n \n', 'tags': '', 'url': 'week7.html'}, {'title': 'week13', 'text': '\n // 包含標準輸出入程式庫的標頭文件\n#include <stdio.h>\n\xa0\n// 主函式\nint main() {\n\xa0\xa0\xa0\xa0// Open a file to write displacement and velocity data\n\xa0\xa0\xa0\xa0FILE *outputFile = fopen("motion_data.txt", "w");\n\xa0\xa0\xa0\xa0if (!outputFile) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(stderr, "Failed to create data file.\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return 1;\n\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0// Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n\xa0\xa0\xa0\xa0double x = 0.2;\xa0 // Initial displacement\n\xa0\xa0\xa0\xa0double v = 0.0;\xa0 // Initial velocity\n\xa0\xa0\xa0\xa0double dt = 0.01; // Time step\n\xa0\xa0\xa0\xa0double t = 0.0;\xa0 // Time\n\xa0\n\xa0\xa0\xa0\xa0while (t <= 10.0) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0v += acceleration * dt;\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0x += v * dt;\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\xa0\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0t += dt;\n\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0// Close the data file\n\xa0\xa0\xa0\xa0fclose(outputFile);\n\xa0\n\xa0\xa0\xa0\xa0// Start a Gnuplot process using popen\n\xa0\xa0\xa0\xa0FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n\xa0\xa0\xa0\xa0if (!gnuplotPipe) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(stderr, "Failed to start Gnuplot.\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0return 1;\n\xa0\xa0\xa0\xa0}\n\xa0\n\xa0\xa0\xa0\xa0// Use Gnuplot plotting commands, specify font and output as PNG\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set output \'./../images/motion_plot.png\'\\n");\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n\xa0\n\xa0\xa0\xa0\xa0// Close the Gnuplot process\n\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "exit\\n");\n\xa0\xa0\xa0\xa0pclose(gnuplotPipe);\n\xa0\n\xa0\xa0\xa0\xa0return 0;\n} \n \n \n', 'tags': '', 'url': 'week13.html'}, {'title': 'week15', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n// width 3: height 2\nint width = 1200;\n// 國旗長寬比為 3:2\nint height = (int)(width * 2.0 / 3.0);\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_roc_flag(img);\n\nFILE *outputFile = fopen("roc_flag_in_gd.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\nint center_x = (int)(width / 4);\nint center_y = (int)(height / 4);\n// gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n// 由於中央白日圓形的半徑為青天寬度的 1/8\n// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\nint sun_radius = (int)(width / 8);\n// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\nint white_circle_dia = sun_radius;\n// 中央藍色圓形半徑為中央白日的 1又 2/15\nint blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;\n// 將中央藍色圓的半徑改為2倍\nblue_circle_dia *= 2;\n\n// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\nred = gdImageColorAllocate(img, 255, 0, 0); // 紅色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n// 根據畫布大小塗上紅色長方形區域\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n// 青天面積為整面國旗的 1/4, 也是採用長方形塗色\ngdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);\n// 先設法以填色畫出六個白色堆疊菱形\ndraw_white_sun(img, center_x, center_y, sun_radius, white);\n// 利用一個藍色大圓與白色小圓畫出藍色環狀\ngdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\ngdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n// 直線連接第二組ABED點\ngdImageLine(img, 429, 125, 279, 165, white);\ngdImageLine(img, 279, 165, 170, 274, white);\ngdImageLine(img, 170, 274, 170, 274, white); // 重複的點\ngdImageLine(img, 170, 274, 429, 125, white);\n}\n\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {\nfloat deg = M_PI / 180;\nfloat sr = sun_radius / tan(75 * deg);\nint ax, ay, bx, by, dx, dy, ex, ey;\ngdPoint points[4];\n\nax = center_x;\nay = center_y - sun_radius;\nprintf("%d,%d\\n", ax, ay);\nbx = center_x - sun_radius * tan(15 * deg);\nby = center_y;\nex = center_x;\ney = center_y + sun_radius;\ndx = center_x + sun_radius * tan(15 * deg);\ndy = center_y;\n\nfor (int i = 1; i <= 6; i++) {\npoints[0].x = ax + sun_radius * sin(30 * deg * i);\npoints[0].y = ay + sun_radius - sun_radius * cos(30 * deg * i);\nprintf("A coord: (%d,%d)\\n", points[0].x, points[0].y);\n\npoints[1].x = bx + sr - sr * cos(30 * deg * i);\npoints[1].y = by - sr * sin(30 * deg * i);\nprintf("B coord: (%d,%d)\\n", points[1].x, points[1].y);\n\npoints[2].x = ex - sun_radius * sin(30 * deg * i);\npoints[2].y = ey - (sun_radius - sun_radius * cos(30 * deg * i));\nprintf("E coord: (%d,%d)\\n", points[2].x, points[2].y);\n\npoints[3].x = dx - (sr - sr * cos(30 * deg * i));\npoints[3].y = dy + sr * sin(30 * deg * i);\nprintf("D coord: (%d,%d)\\n\\n", points[2].x, points[2].y);\n\ngdImageFilledPolygon(img, points, 4, color);\ngdImagePolygon(img, points, 4, color);\n}\n}\n\n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\nint main() {\n// width 3: height 2\nint width = 1200;\n// 國旗長寬比為 3:2\nint height = (int)(width*2.0 / 3.0);\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_roc_flag(img);\n\nFILE *outputFile = fopen("roc_flag_in_gd.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\nint center_x = (int)(width/4);\nint center_y = (int)(height/4);\n// gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n// 由於中央白日圓形的半徑為青天寬度的 1/8\n// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\nint sun_radius = (int)(width/8);\n// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\nint white_circle_dia = sun_radius;\n// 中央藍色圓形半徑為中央白日的 1又 2/15\nint blue_circle_dia = white_circle_dia + white_circle_dia*2/15;\n// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\nred = gdImageColorAllocate(img, 255, 0, 0); // 紅色\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色\nblue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n// 根據畫布大小塗上紅色長方形區域\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n// 青天面積為整面國旗的 1/4, 也是採用長方形塗色\ngdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n{int x1 = 429;\nint y1 = 125;\nint x2 = 279;\nint y2 = 165;\n\n// 畫一條線連接兩個點\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n{int x1 = 170;\nint y1 = 274;\nint x2 = 279;\nint y2 = 165;\n\n// 畫一條線連接兩個點\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n{\nint x1 = 170;\nint y1 = 274;\nint x2 = 429;\nint y2 = 125;\n\n// 畫一條線連接兩個點\ngdImageLine(img, x1, y1, x2, y2, white);\n}\n// 利用一個藍色大圓與白色小圓畫出藍色環狀\ngdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\ngdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n\n// 定義座標結構\ntypedef struct {\ndouble x;\ndouble y;\n} Point;\n\n// 計算圓與線的交點\nvoid circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) {\n// 直線斜率\ndouble m = (y2 - y1) / (x2 - x1);\n\n// 直線方程式中的常數項\ndouble b = y1 - m * x1;\n\n// 圓與直線交點的計算\ndouble A = 1 + pow(m, 2);\ndouble B = 2 * (m * b - m * k - h);\ndouble C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2);\n\n// 判斷交點個數\ndouble discriminant = pow(B, 2) - 4 * A * C;\nif (discriminant > 0) {\ndouble x_intersect1 = (-B + sqrt(discriminant)) / (2 * A);\ndouble y_intersect1 = m * x_intersect1 + b;\nprintf("交點: (%.2f, %.2f)\\n", x_intersect1, y_intersect1);\n\ndouble x_intersect2 = (-B - sqrt(discriminant)) / (2 * A);\ndouble y_intersect2 = m * x_intersect2 + b;\nprintf("交點: (%.2f, %.2f)\\n", x_intersect2, y_intersect2);\n} else if (discriminant == 0) {\ndouble x_intersect = -B / (2 * A);\ndouble y_intersect = m * x_intersect + b;\nprintf("交點: (%.2f, %.2f)\\n", x_intersect, y_intersect);\n} else {\nprintf("No points.\\n");\n}\n\n}\n\n\n// 圓的參數\ndouble circle_x = (int)(width/4); // 圓心 x 座標\ndouble circle_y = (int)(height/4); // 圓心 y 座標\ndouble radius = white_circle_dia + white_circle_dia*2/15; // 圓半徑\n\n// 兩點座標\n\n\n\ndouble x3 = 170;\ndouble y3 = 274;\ndouble x4 = 279;\ndouble y4 = 165;\n\ncircleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3);\n\n\ndouble x5 = 279;\ndouble y5 = 165;\ndouble x6 = 429;\ndouble y6 = 125;\n\ncircleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5);\n\n\n\n\n\n\n} \n \n 交點: (388.90, 55.10) 交點: (155.10, 288.90) 交點: (449.72, 119.47) 交點: (130.07, 204.72) \n', 'tags': '', 'url': 'week15.html'}, {'title': 'week16', 'text': '\n #include <stdio.h>\n\xa0\nint main() {\n\xa0\xa0\xa0\xa0FILE *gnuplotPipe = popen("gnuplot", "w");\n\xa0\xa0\xa0\xa0if (gnuplotPipe) {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set terminal png\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set output \'motion_plot.png\'\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set xlabel \'Time\'\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "set ylabel \'Position / Velocity\'\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines title \'m1 position\', \'motion_data.txt\' using 1:3 with lines title \'m2 position\', \'motion_data.txt\' using 1:4 with lines title \'m1 velocity\', \'motion_data.txt\' using 1:5 with lines title \'m2 velocity\'\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fprintf(gnuplotPipe, "exit\\n");\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0fflush(gnuplotPipe);\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0pclose(gnuplotPipe);\n\xa0\xa0\xa0\xa0} else {\n\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0printf("Error opening pipe to Gnuplot.\\n");\n\xa0\xa0\xa0\xa0}\n\xa0\xa0\xa0\xa0return 0;\n} \n \n \n', 'tags': '', 'url': 'week16.html'}, {'title': 'C_EX', 'text': '\n 1.#include <stdio.h> void main() { int a; a = 3; printf("%d\\n", !a ); a = 0; printf("%d\\n", !a ); } \n \n 2.#include <stdio.h> void main() { printf("%d\\n", 1 && 3 ); printf("%d\\n", 0 && 0 ); printf("%d\\n", 2 && 2 ); } \n \n 3. \n #include <stdio.h> \n void   main() \n { \n printf ( "%d\\n" , 1 || 0 ); \n printf ( "%d\\n" , 0 || 0 ); \n printf ( "%d\\n" , 2 || 2 ); \n } \n \n 4. \n #include <stdio.h> void main() { char a; printf( " The size of int is %d \\n", sizeof(int) ); printf( " The size of char a is %d \\n", sizeof(a) ); } \n \n 5. \n \n #include <stdio.h> \n \xa0 \n int   main() { \n \xa0\xa0\xa0\xa0 char   ch;  \n \xa0\xa0\xa0\xa0 printf ( "input a char: " ); \n \xa0\xa0\xa0\xa0 scanf ( "%c" , &ch); \n \xa0\xa0\xa0\xa0 if   (ch ==  \'a\' ) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 printf ( "You pressed \'a\'\\n" ); \n \xa0\xa0\xa0\xa0 } \n \xa0\xa0\xa0\xa0 return   0; \n } \n \n 6. \n \n \n#include <stdio.h> int main() {  char ch; // 宣告一個字符型變數 ch  // 提示用戶輸入一個字符  printf("輸入一個字符：");  // 檢查 scanf 的返回值，確保成功讀取了一個字符  if (scanf("%c", &ch) != 1) {  fprintf(stderr, "錯誤：無法讀取字符。\\n");  return 1; // 返回錯誤碼  }  // 檢查輸入的字符是否為 \'a\'  if (ch == \'a\') {  printf("你輸入的是 \'a\'\\n"); // 如果是 \'a\'，則印出相應的消息  } else {  printf("你輸入的不是 \'a\'\\n"); // 如果不是 \'a\'，則印出相應的消息  }  return 0; } \n \n 7. \n #include <stdio.h> int main() {  int i; // 宣告一個整數變數 i  // 提示用戶輸入一個整數  printf("輸入一個整數：");  // 檢查 scanf 的返回值，確保成功讀取了一個整數  if (scanf("%d", &i) != 1) {  fprintf(stderr, "錯誤：無法讀取整數。\\n");  return 1; // 返回錯誤碼  }  // 根據 i 的值進行不同的判斷  if (i < 100) {  printf("i < 100\\n");  } else {  if ((i >= 100) && (i < 200)) {  printf("i >= 100 and i < 200\\n");  } else {  printf("i >= 200\\n");  }  }  return 0; } \n \n \n 8. \n #include <stdio.h> \n int main() {  char c; // 宣告一個字符型變數 c \n // 提示用戶輸入一個字符  printf("輸入一個字符："); \n // 檢查 scanf 的返回值，確保成功讀取了一個字符  if (scanf(" %c", &c) != 1) {  fprintf(stderr, "錯誤：無法讀取字符。\\n");  return 1; // 返回錯誤碼  } \n // 使用 switch 陳述式根據讀取的字符執行相應的分支  switch(c) {  case \'a\':  printf("你按下了 \'a\'\\n");  break;  case \'b\':  printf("你按下了 \'b\'\\n");  break;  case \'c\':  printf("你按下了 \'c\'\\n");  break;  default:  printf("不是 \'a\'、\'b\' 或 \'c\'\\n");  break;  } \n return 0; } \n \n 9. \n #include <stdio.h> \n int main() {  char c; // 宣告一個字符型變數 c \n // 提示用戶輸入一個字符  printf("輸入一個字符："); \n // 檢查 scanf 的返回值，確保成功讀取了一個字符  if (scanf(" %c", &c) != 1) {  fprintf(stderr, "錯誤：無法讀取字符。\\n");  return 1; // 返回錯誤碼  } \n // 使用 switch 陳述式根據讀取的字符執行相應的分支  switch(c) {  case \'a\':  printf("你按下了 \'a\'\\n");  break;  case \'b\':  printf("你按下了 \'b\'\\n");  break;  case \'c\':  printf("你按下了 \'c\'\\n");  break;  default:  printf("不是 \'a\'、\'b\' 或 \'c\'\\n");  break;  } \n return 0; } \n \n 10. \n #include<stdio.h> \n void main() {  int i;  for (i = 0; i < 6; i++) {  printf("%d\\n", i); /* 印出 i */  } } \n \n \n \n', 'tags': '', 'url': 'C_EX.html'}, {'title': 'ANSIC', 'text': '\n 1. \n #include <stdio.h> \n int main()  {  // Print Name  printf("Name : Alexandra Abramov\\n"); \n // Print Date of Birth  printf("DOB : July 14, 1975\\n"); \n // Print Mobile Number  printf("Mobile : 99-9999999999\\n"); \n // Indicate successful execution  return(0);  } \n \n \n #include <stdio.h>：此行包含標準輸入輸出庫，其中包含從控制台讀取和寫入資料的函數。 \n int main()：這是程式的主函數，從這裡開始執行。它傳回一個整數值，通常為 0，表示執行成功。 \n 在「main()」函數內部，有三個printf語句。“printf()”函數用於將格式化文字列印到控制台。每個 printf 語句列印一行包含特定資訊的文字： \n \n printf("姓名：亞歷珊卓·阿布拉莫夫\\n"); \xa0 列印“Name : Alexandra Abramov”，後面跟著換行符，將遊標移到下一行。 \n printf("出生日期：1975 年 7 月 14 日\\n"); \xa0 印出“DOB : July 14, 1975”，後面跟著換行符。 \n printf("手機: 99-9999999999\\n"); \xa0 列印“Mobile : 99-9999999999”，後面跟著換行符。 \n \n return(0);：這一行表示主函數結束，回傳0。 \n \n 2. \n #include <stdio.h> \n int main(int argc, char** argv) {  // Check for C standard version  #if __STDC_VERSION__ >= 201710L  printf("We are using C18!\\n");  #elif __STDC_VERSION__ >= 201112L  printf("We are using C11!\\n");  #elif __STDC_VERSION__ >= 199901L  printf("We are using C99!\\n");  #else  printf("We are using C89/C90!\\n");  #endif \n // Indicate successful execution  return 0; } \n \n \n ＃include ：這一行包含標準輸入輸出庫，這是使用「printf」所必需的。 \n int main(int argc, char** argv)：這是帶有命令列參數 argc 和 argv 的 main 函數。但是，在此程式碼中，未使用這些參數。 \n 程式碼使用預處理器指令（#if、#elif、#else 和 #endif）根據編譯器偵測到的 C 標準版本有條件地編譯不同的列印語句： \n \n #if __STDC_VERSION__ >= 201710L 檢查 C 標準版本是否大於或等於 C18 (2017)。如果為真，則會列印「我們正在使用 C18！」。 \n #elif __STDC_VERSION__ >= 201112L 檢查 C 標準版本是否大於或等於 C11 (2011)。如果為 true，則會列印「We are using C11!」。 \n #elif __STDC_VERSION__ >= 199901L 檢查 C 標準版本是否大於或等於 C99 (1999)。如果為 true，則會列印「We are using C99!」。 \n #else 是一個後備條件，如果上述條件均不滿足，則觸發該條件。它列印“我們正在使用 C89/C90！”。 \n \n return 0;：這一行表示main函數結束，向作業系統回傳0，表示程式執行成功。 \n \n 3. \n #include <stdio.h> \n int main() {  // 印出一行井號  printf("######\\n"); \n // 印出一個單獨的井號  printf("#\\n"); \n // 印出一個單獨的井號  printf("#\\n"); \n // 印出一行井號  printf("#####\\n"); \n // 印出一個單獨的井號  printf("#\\n"); \n // 印出一個單獨的井號  printf("#\\n"); \n // 印出一個單獨的井號  printf("#\\n"); \n return 0; } \n \n 4. \n #include <stdio.h> \n int main() {  int radius; /* Variable to store the radius of the circle */  float area, perimeter; /* Variables to store the area and perimeter of the circle */   radius = 6; /* Assigning a value to the radius */ \n /* Calculating the perimeter of the circle */  perimeter = 2 * 3.14 * radius;  printf("Perimeter of the Circle = %f inches\\n", perimeter); \n /* Calculating the area of the circle */  area = 3.14 * radius * radius;  printf("Area of the Circle = %f square inches\\n", area); \n return(0); } \n \n 在上面的練習中 - \n \n 程式包括標準輸入/輸出庫<stdio.h>。 \n 它聲明了幾個變數： \n \n int radius：表示圓半徑。 \n 浮動面積和浮動週長：將儲存計算出的圓的面積和周長。 \n \n 在“main()”函數中： \n \n 它將值 6 分配給“radius”變量，表示圓的半徑。 \n \n 然後程式計算圓的周長和麵積： \n \n 週長：它使用公式 2*3.14* 半徑來計算圓的周長，並將結果儲存在「週長」變數中。 這裡，3.14 是數學常數 π (pi) 的近似值。 \n 面積：使用公式 3.14*radius*radius (π * r^2) 計算面積，並將結果儲存於「area」變數中。 \n \n 最後，程式使用“printf()”函數顯示計算值： \n \n 它會列印計算出的周長並顯示一條訊息：「圓的周長 = [週長] 英吋」。 \n 它會列印計算出的面積並顯示一條訊息：“圓的面積 = [面積] 平方英吋。” \n \n 程式返回0表示執行成功。 \n \n 5. \n #include <stdio.h> \n int main()  {  // 宣告並初始化字符變數  char char1 = \'X\';  char char2 = \'M\';  char char3 = \'L\'; \n // 印出原始和反向字符  printf("The reverse of %c%c%c is %c%c%c\\n",  char1, char2, char3,  char3, char2, char1); \n return 0; } \n \n #include <stdio.h> - 此程式碼包含標準輸入/輸出庫 <stdio.h>。 \n \n 在“main()”函數中，它聲明了三個字元變數：“char1”、“char2”和“char3”，並分別為它們賦值“X”、“M”和“L”。 \n 它使用“printf()”函數來顯示格式化訊息。 該訊息包含由 %c 指定的佔位符，它們代表字元。 \n 在「printf()」函數內部，它提供了替代佔位符的值。 在本例中，它提供了“char1”、“char2”和“char3”，後面跟著它們的相反順序：“char3”、“char2”和“char1”。 \n 程式將會列印：“XML 的反向是 LMX”，因為它以相反的順序交換字元。 \n 最後main函數傳回0表示程式執行成功。 \n \n 6. \n #include <stdio.h> \n int main() {  int a = 125, b = 12345; /* 宣告並初始化整數變數 */  long ax = 1234567890; /* 宣告並初始化長整數變數 */  short s = 4043; /* 宣告並初始化短整數變數 */  float x = 2.13459; /* 宣告並初始化浮點數變數 */  double dx = 1.1415927; /* 宣告並初始化雙精度浮點數變數 */  char c = \'W\'; /* 宣告並初始化字符變數 */  unsigned long ux = 2541567890; /* 宣告並初始化無符號長整數變數 */ \n /* 各種算術運算和類型轉換 */  printf("a + c = %d\\n", a + c);  printf("x + c = %f\\n", x + c);  printf("dx + x = %f\\n", dx + x);  printf("((int) dx) + ax = %ld\\n", ((int) dx) + ax);  printf("a + x = %f\\n", a + x);  printf("s + b = %d\\n", s + b);  printf("ax + b = %ld\\n", ax + b);  printf("s + c = %hd\\n", s + c);  printf("ax + c = %ld\\n", ax + c);  printf("ax + ux = %lu\\n", ax + ux); \n return 0; } \n \n 7. \n #include <stdio.h> \n int main() {  int days, years, weeks; \n days = 1329; // Total number of days \n // Converts days to years, weeks and days  years = days/365; // Calculate years  weeks = (days % 365)/7; // Calculate weeks  days = days - ((years*365) + (weeks*7)); // Calculate remaining days \n // Print the results  printf("Years: %d\\n", years);  printf("Weeks: %d\\n", weeks);  printf("Days: %d \\n", days); \n return 0; } \n 在上面的練習中 - \n \n 程式包括標準輸入/輸出庫<stdio.h>。 \n 它聲明了三個整數變數： \n \n int days：此變數儲存要轉換的總天數。 \n intyear：儲存計算出的年數。 \n int week：儲存計算出的周數。 \n \n 程式用 1329 初始化“days”變數。 \n 然後它會轉換： \n \n 年=天/365：此除法計算給定天數中的年數。 由於一年大約有 365 天，因此這種劃分給出了年數的估計。 \n 週 = (天 % 365) / 7：計算出年份後，程式使用模運算子 % 來找出無法用完整年份表示的剩餘天數。 然後將該餘數除以 7 來計算週數。 \n 最後，減去年和周所佔的天數即可得到剩餘的天數。 \n \n 程式使用 printf 語句來顯示計算值： \n \n 它會列印年數並顯示以下訊息：“年：[年]。” \n 它會列印週數並顯示以下訊息：“週：[週]。” \n 它會列印剩餘天數並顯示以下訊息：“天數：[天]。” \n \n 程式返回0表示執行成功。 \n \n 8. \n #include <stdio.h> \n int main() {  int x, y;  int result1, result2; // 用于存储 scanf 的返回值 \n // 获取第一个整数  printf("Input the first integer: ");  result1 = scanf("%d", &x);  if (result1 != 1) {  printf("Error: Please enter an integer.\\n");  return 1;  } \n // 获取第二个整数  printf("Input the second integer: ");  result2 = scanf("%d", &y);  if (result2 != 1) {  printf("Error: Please enter an integer.\\n");  return 1;  } \n // 计算并输出它们的和  printf("Sum of the two integers = %d\\n", x + y); \n return 0; } \n \n 9. \n #include <stdio.h> \n int main() {  int x, y;  int result_x, result_y; // 用於儲存 scanf 的返回值 \n // 獲取第一個整數  printf("輸入第一個整數：");  result_x = scanf("%d", &x);  if (result_x != 1) {  printf("錯誤：請輸入整數。\\n");  return 1;  } \n // 獲取第二個整數  printf("輸入第二個整數：");  result_y = scanf("%d", &y);  if (result_y != 1) {  printf("錯誤：請輸入整數。\\n");  return 1;  } \n // 計算並輸出它們的乘積  printf("這兩個整數的乘積 = %d\\n", x * y); \n return 0; } \n \n 10. \n #include <stdio.h> \n int main() {  char id[10]; // 用於存儲員工ID的變數（最多10個字符）  int hour; // 用於存儲工作時數的變數  double value, salary; // 用於每小時薪資和總薪資的變數 \n // 提示使用者輸入員工ID  printf("輸入員工ID（最多10個字符）："); \n // 檢查scanf的返回值  if (scanf("%9s", id) != 1) {  fprintf(stderr, "錯誤：無法讀取員工ID。\\n");  return 1; // 返回錯誤碼  } \n // 提示使用者輸入工作時數  printf("\\n輸入工作時數："); \n // 檢查scanf的返回值  if (scanf("%d", &hour) != 1) {  fprintf(stderr, "錯誤：無法讀取工作時數。\\n");  return 1; // 返回錯誤碼  } \n // 提示使用者輸入每小時薪資  printf("\\n每小時薪資："); \n // 檢查scanf的返回值  if (scanf("%lf", &value) != 1) {  fprintf(stderr, "錯誤：無法讀取每小時薪資。\\n");  return 1; // 返回錯誤碼  } \n // 計算總薪資  salary = value * hour; \n // 印出員工ID和薪資  printf("\\n員工ID = %s\\n薪資 = U$ %.2lf\\n", id, salary); \n return 0; } \n \n', 'tags': '', 'url': 'ANSIC.html'}, {'title': '期末總結', 'text': '41223215 吳承睿 75分 我在自己的網站有把老師的作業幾乎都做出來 \n A: 是否 按照進度明確標示倉儲的改版歷程:沒 我好幾次忘記推 所以在學期末一併推上去 \n \n B: 是否根據\xa0 IPv4 與 IPv6 \xa0 網路環境設定進行作法討論:有 \n \n C: 是否就 \xa0 Replit、s.cycu.org 與 localhost \xa0 情境下對個人與分組倉儲進行設定操作:幾乎都用Replit來練習 \n \n D: 是否完成 上課內容 中的 Exercises:有 \n \n E: 是否完成\xa0 w2-w5 \xa0 週任務中的 Exercises:有 \n \n F: 是否完成\xa0 w6-w7 \xa0 週任務中的練習一與練習二:有 \n \n G: 是否完成 C 結合 gd 繪圖程式庫, 畫出\xa0 PROC ( 規格 ), \xa0 United Kingdom ( 規格 ), \xa0 Japan ( 規格 )與 \xa0 South Korea ( 規格 ) Flags:有 \n \n H: 是否完成 w16 Final Pr oject:有\xa0 \n \n \n \n', 'tags': '', 'url': '期末總結.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};