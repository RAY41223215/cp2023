var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/mdecycu/cmsite  \n', 'tags': '', 'url': 'About.html'}, {'title': 'week5', 'text': '// 包含標準輸出入程式庫的標頭文件 \n // https://blog.csdn.net/weixin_38468077/article/details/101069365 \n // http://www.gnuplot.info/demo/ \n // https://github.com/sysprog21/rv32emu \n // https://github.com/sysprog21/semu  \n // https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3 \n // https://cs61c.org/fa23/ \n // https://greenteapress.com/wp/think-python-2e/ \n // https://github.com/ecalvadi/c99-examples \n // https://github.com/gouravthakur39/beginners-C-program-examples \n // https://github.com/ergenekonyigit/Numerical-Analysis-Examples \n // https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf \n // https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf \n // https://jsommers.github.io/cbook/cbook.pdf \n // https://jsommers.github.io/cbook/index.html \n // http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf \n // http://cslibrary.stanford.edu/101/EssentialC.pdf \n // https://publications.gbdirect.co.uk/c_book/ \n // https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf \n // ***** execute on replit  \n // cd downloads \n // cc gnuplot_ex1.c -o gnuplot_ex1 \n // ./gnuplot_ex1 \n #include <stdio.h> \n \xa0 \xa0 \n // 主函式 \n int   main() { \n \xa0\xa0\xa0\xa0 // Start a Gnuplot process using popen \n \xa0\xa0\xa0\xa0 FILE   *gnuplotPipe = popen( "gnuplot -persistent" ,  "w" ); \n \xa0\xa0\xa0\xa0 if   (!gnuplotPipe) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "Failed to start Gnuplot.\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 // Use Gnuplot plotting commands, specify font and output as PNG \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set terminal png font \'default,10\' size 800,400\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set output \'./../images/gnuplot_ex1.png\'\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "plot sin(x)" ); \n \xa0\xa0\xa0\xa0 // Close popen \n \xa0\xa0\xa0\xa0 pclose(gnuplotPipe); \n \xa0 \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \n', 'tags': '', 'url': 'week5.html'}, {'title': 'week6', 'text': '// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China // 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621 // cc roc_flag_in_gd.c -lgd -lm to link with gd and math library // https://www.rapidtables.com/web/color/RGB_Color.html // 幾何形狀著色與繪圖練習 // 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖 #include <stdio.h> #include <gd.h> #include <math.h> \n void draw_roc_flag(gdImagePtr img); void draw_white_sun(gdImagePtr img, int x, int y, int size, int color); \n int main() {  // width 3: height 2  int width = 1200;  // 國旗長寬比為 3:2  int height = (int)(width*2.0 / 3.0); \n gdImagePtr img = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(img, 0); \n draw_roc_flag(img); \n FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "Error opening the output file.\\n");  return 1;  }  gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img);  return 0; } \n void draw_roc_flag(gdImagePtr img) {  int width = gdImageSX(img);  int height = gdImageSY(img);  int red, white, blue;  // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處  int center_x = (int)(width/4);  int center_y = (int)(height/4);  // gdImageFilledEllipse 需以長寬方向的 diameter 作圖  // 由於中央白日圓形的半徑為青天寬度的 1/8  // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8  // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8  int sun_radius = (int)(width/8);  // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑  int white_circle_dia = sun_radius;  // 中央藍色圓形半徑為中央白日的 1又 2/15  int blue_circle_dia = white_circle_dia + white_circle_dia*2/15;  // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值  red = gdImageColorAllocate(img, 255, 0, 0); // 紅色  white = gdImageColorAllocate(img, 255, 255, 255); // 白色  blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色  // 根據畫布大小塗上紅色長方形區域  gdImageFilledRectangle(img, 0, 0, width, height, red);  // 青天面積為整面國旗的 1/4, 也是採用長方形塗色  gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);  // 先設法以填色畫出六個白色堆疊菱形  draw_white_sun(img, center_x, center_y, sun_radius, white);  // 利用一個藍色大圓與白色小圓畫出藍色環狀  gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);  gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); \n } \n void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {  // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位  // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度  float deg = M_PI/180;  // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度  // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小  float sr = sun_radius/tan(75*deg);  int ax, ay, bx, by, dx, dy, ex, ey;  gdPoint points[4];  /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確  ax = center_x;  ay = center_y - sun_radius;  bx = center_x - sun_radius*tan(15*deg);  by = center_y;  ex = center_x;  ey = center_y + sun_radius;  dx = center_x + sun_radius*tan(15*deg);  dy = center_y;  // AB  gdImageLine(img, ax, ay, bx, by, color);  // BE  gdImageLine(img, bx, by, ex, ey, color);  // ED  gdImageLine(img, ex, ey, dx, dy, color);  // DA  gdImageLine(img, dx, dy, ax, ay, color);  */  ax = center_x;  ay = center_y - sun_radius;  bx = center_x - sun_radius*tan(15*deg);  by = center_y;  ex = center_x;  ey = center_y + sun_radius;  dx = center_x + sun_radius*tan(15*deg);  dy = center_y;  // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域  for (int i=1;i<=6;i++){  // A  points[0].x = ax+sun_radius*sin(30*deg*i);  points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);  // B  points[1].x = bx+sr-sr*cos(30*deg*i);  points[1].y = by-sr*sin(30*deg*i);  // E  points[2].x = ex-sun_radius*sin(30*deg*i);  points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));  // D  points[3].x = dx-(sr-sr*cos(30*deg*i));  points[3].y = dy+sr*sin(30*deg*i);  // 對菱形區域範圍塗色  gdImageFilledPolygon(img, points, 4, color);  // 在菱形區域外圍畫線, 明確界定菱形範圍  gdImagePolygon(img, points, 4, color);  } \n #include <stdio.h> #include <gd.h> #include <math.h> \n void draw_usa_flag(gdImagePtr img); void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle); \n int main() {  int width = 800;  int height = (int)(width / 1.9); \n gdImagePtr img = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(img, 0); \n draw_usa_flag(img); \n FILE *outputFile = fopen("./../images/usa_flag.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "打开输出文件时出错。\\n");  return 1;  } \n gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img); \n return 0; } \n void draw_usa_flag(gdImagePtr img) {  int width = gdImageSX(img);  int height = gdImageSY(img);  int red, white, blue;  // 国旗颜色  red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹  white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹  blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形 \n int stripe_height = 33 ;  int stripe_width = width ;  int star_size = (int)(0.0308 * height); // 星星大小 \n for (int y = 0; y < height; y += stripe_height) {  if (y / stripe_height % 2 == 0) {  gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);  } else {  gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);  }  } \n gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 698 / 100, blue); \n int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距  int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距  int star_start_x = (int)(0.125 * height); // 星星的起始X位置  int star_start_y = (int)(0.06 * height); // 星星的起始Y位置 \n for (int row = 0; row < 9; row++) {  int starsPerRow = (row % 2 == 0) ? 6 : 5; \n // 计算2、4、6和8排星星的偏移量  int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0; \n for (int star = 0; star < starsPerRow; star++) {  int x = star_start_x + star * star_spacing_x + offset_x; \n // 旋转角度（以弧度为单位）  double rotation_angle = M_PI / 5; // 忘記多少度的旋转 \n int y = star_start_y + row * star_spacing_y;  draw_star(img, x, y, star_size, white, rotation_angle);  }  } } \n void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {  gdPoint points[10]; \n for (int i = 0; i < 10; i++) {  double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;  int radius = (i % 2 == 0) ? size : size / 2;  points[i].x = x + radius * cos(angle);  points[i].y = y + radius * sin(angle);  } \n // 用指定的颜色填充星星  gdImageFilledPolygon(img, points, 10, color); } \n \n', 'tags': '', 'url': 'week6.html'}, {'title': 'week7', 'text': '#include <stdio.h> #include <gd.h> #include <math.h> \n void draw_chinese_flag(gdImagePtr img); \n int main() {  int width = 300; // 國旗寬度  int height = 200; // 國旗高度 \n gdImagePtr im = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(im, 0); \n draw_chinese_flag(im); \n FILE *outputFile = fopen("./../images/proc_flag.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "打开输出文件时出错。\\n");  return 1;  } \n gdImagePngEx(im, outputFile, 9);  fclose(outputFile);  gdImageDestroy(im); \n return 0; } \n // 声明 draw_star 函数 void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle); \n void draw_chinese_flag(gdImagePtr img) {  int width = gdImageSX(img);  int height = gdImageSY(img);  int red, yellow; \n // 國旗顏色  red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景  yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星 \n // 畫紅色背景  gdImageFilledRectangle(img, 0, 0, width, height, red); \n // 設置星星的大小和位置  int star_size = (int)(0.28 * height);  int star_x = (int)(0.165 * width);  int star_y = (int)(0.265 * height); \n // 畫大星星  draw_star(img, star_x, star_y, star_size, yellow, 11.0); \n // 繪製小星星，位置根據實際國旗比例計算  double radius = 0.15 * height;  double angle = 360 / 7 * M_PI / 179.0;  double rotation = -M_PI / 7.5;  int cx = (int)(0.32 * width);  int cy = (int)(0.27 * height); \n for (int i = -1; i < 3; i++) {  int x = (int)(cx + radius * cos(i * angle + rotation));  int y = (int)(cy + radius * sin(i * angle + rotation));  draw_star(img, x, y, 19, yellow, M_PI / 5.0);  } } \n void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {  gdPoint points[10]; \n // 计算星形的五个外点和五个内点  double outer_radius = size / 2;  double inner_radius = size / 6;  double angle = M_PI / 5.0; \n for (int i = 0; i < 10; i++) {  double radius = (i % 2 == 0) ? outer_radius : inner_radius;  double theta = rotation_angle + i * angle;  points[i].x = x + radius * cos(theta);  points[i].y = y + radius * sin(theta);  } \n // 使用 gdImageFilledPolygon 绘制星形  gdImageFilledPolygon(img, points, 10, color); } \n \n #include <stdio.h> #include <gd.h> #include <math.h> \n void draw_uk_flag(gdImagePtr img); void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color); \n int main() {  // 设置国旗的宽和高  int width = 1200;  int height = width / 2; \n // 创建图像  gdImagePtr img = gdImageCreateTrueColor(width, height);  gdImageAlphaBlending(img, 0); \n // 绘制英国国旗  draw_uk_flag(img); \n // 将图像保存到文件  FILE *outputFile = fopen("./../images/uk_flag.png", "wb");  if (outputFile == NULL) {  fprintf(stderr, "打开输出文件时发生错误。\\n");  return 1;  }  gdImagePngEx(img, outputFile, 9);  fclose(outputFile);  gdImageDestroy(img);  return 0; } \n \n void draw_uk_flag(gdImagePtr img) {  int width = gdImageSX(img);  int height = gdImageSY(img); \n int red, white, blue;  red = gdImageColorAllocate(img, 204, 0, 0); // 红色  white = gdImageColorAllocate(img, 255, 255, 255); // 白色  blue = gdImageColorAllocate(img, 0, 0, 153); // 蓝色 \n gdImageFilledRectangle(img, 0, 0, width, height, blue); \n  int x1, y1, x2, y2, x3, y3;  {  int line_thickness = 100;  gdImageSetThickness(img, line_thickness); \n int x1, y1, x2, y2, x3, y3; \n // 绘制白色斜线  x1 = 0;  y1 = 600;  x2 = 1200;  y2 = 0;  gdImageLine(img, x1, y1, x2, y2, white); \n x1 = 0;  y1 = 0;  x2 = 1200;  y2 = 600;  gdImageLine(img, x1, y1, x2, y2, white); }  {  int line_thickness = 33;  gdImageSetThickness(img, line_thickness); \n  // 绘制红色斜线  x1 = 566;  y1 = 300;  x2 = 1166;  y2 = 0;  gdImageLine(img, x1, y1, x2, y2, red); \n x1 = 1233;  y1 = 600;  x2 = 633;  y2 = 300;  gdImageLine(img, x1, y1, x2, y2, red); \n x1 = 566;  y1 = 300;  x2 = -33;  y2 = 0;  gdImageLine(img, x1, y1, x2, y2, red); \n x1 = 600;  y1 = 316.5;  x2 = 0;  y2 = 616.5;  gdImageLine(img, x1, y1, x2, y2, red);  }  {  int line_thickness = 33;  gdImageSetThickness(img, line_thickness); \n int x1, y1, x2, y2, x3, y3; \n // 绘制 斜线  x1 = 0;  y1 = 600;  x2 = 1200;  y2 = 0;  gdImageLine(img, x1, y1, x2, y2, red ); \n  x1 = 1200;  y1 = 16.5;  x2 = 600;  y2 = 316.5;  gdImageLine(img, x1, y1, x2, y2, white); \n  x1 = 0;  y1 = 583.5;  x2 = 600;  y2 = 283.5;  gdImageLine(img, x1, y1, x2, y2, white); \n  } \n // 绘制白色十字  int cross_width = width / 32;  int cross_arm_width = width / 32;  int center_x = width / 2;  int center_y = height / 2; \n gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);  gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white); \n // 绘制红色十字  gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);  gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red); } \n \n #include <stdio.h> #include <gd.h> \n int main() {  // 國旗尺寸  int width = 1200;  int height = 600; \n // 創建圖像  gdImagePtr img = gdImageCreate(width, height); \n // 設置白色背景  int white = gdImageColorAllocate(img, 255, 255, 255);  gdImageFilledRectangle(img, 0, 0, width, height, white); \n // 計算中間紅點的直徑和位置  int circleDiameter = height * 3 / 5;  int circleRadius = circleDiameter / 2;  int circleX = width / 2;  int circleY = height / 2; \n // 設置紅色圓圈  int red = gdImageColorAllocate(img, 255, 0, 0);  gdImageFilledEllipse(img, circleX, circleY, circleDiameter, circleDiameter, red); \n // 儲存圖像  FILE *output = fopen("japan_flag.png", "wb");  if (output == NULL) {  fprintf(stderr, "Error creating output file\\n");  return 1;  } \n gdImagePng(img, output);  fclose(output); \n // 釋放記憶體  gdImageDestroy(img); \n return 0; } \n \n', 'tags': '', 'url': 'week7.html'}, {'title': 'week13', 'text': '// 包含標準輸出入程式庫的標頭文件 \n #include <stdio.h> \n \xa0 \n // 主函式 \n int   main() { \n \xa0\xa0\xa0\xa0 // Open a file to write displacement and velocity data \n \xa0\xa0\xa0\xa0 FILE   *outputFile =  fopen ( "motion_data.txt" ,  "w" ); \n \xa0\xa0\xa0\xa0 if   (!outputFile) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "Failed to create data file.\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file \n \xa0\xa0\xa0\xa0 double   x = 0.2;\xa0  // Initial displacement \n \xa0\xa0\xa0\xa0 double   v = 0.0;\xa0  // Initial velocity \n \xa0\xa0\xa0\xa0 double   dt = 0.01;  // Time step \n \xa0\xa0\xa0\xa0 double   t = 0.0;\xa0  // Time \n \xa0 \n \xa0\xa0\xa0\xa0 while   (t <= 10.0) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 double   acceleration = (-10.0 * x - 0.5 * v) / 1.0;  // Modified system parameters here \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 v += acceleration * dt; \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 x += v * dt; \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (outputFile,  "%lf %lf %lf\\n" , t, x, v); \n \xa0 \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 t += dt; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // Close the data file \n \xa0\xa0\xa0\xa0 fclose (outputFile); \n \xa0 \n \xa0\xa0\xa0\xa0 // Start a Gnuplot process using popen \n \xa0\xa0\xa0\xa0 FILE   *gnuplotPipe = popen( "gnuplot -persistent" ,  "w" ); \n \xa0\xa0\xa0\xa0 if   (!gnuplotPipe) { \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 fprintf (stderr,  "Failed to start Gnuplot.\\n" ); \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 return   1; \n \xa0\xa0\xa0\xa0 } \n \xa0 \n \xa0\xa0\xa0\xa0 // Use Gnuplot plotting commands, specify font and output as PNG \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set output \'./../images/motion_plot.png\'\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set title \'Displacement and Velocity vs. Time\'\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set xlabel \'Time (s)\'\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "set ylabel \'Displacement (m)\'\\n" ); \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe, "plot  \'motion_data.txt\'   using   1:2 with lines lw 2 title  \'Displacement\' , \\ \n \xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0\xa0 \'motion_data.txt\'   using   1:3 with lines lw 2 title  \'Velocity\' \\n"); \n \xa0 \n \xa0\xa0\xa0\xa0 // Close the Gnuplot process \n \xa0\xa0\xa0\xa0 fprintf (gnuplotPipe,  "exit\\n" ); \n \xa0\xa0\xa0\xa0 pclose(gnuplotPipe); \n \xa0 \n \xa0\xa0\xa0\xa0 return   0; \n } \n \n \n', 'tags': '', 'url': 'week13.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};