<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite </a></p>
<h1>week5</h1>
<div class="line number1 index0 alt2">
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;
  
// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
  
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);
  
    return 0;
}</pre>
</div>
<p><img alt="" height="200" src="/images/gnuplot_ex1.png" width="400"/></p>
<h1>week6</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621
// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
// width 3: height 2
int width = 1200;
// 國旗長寬比為 3:2
int height = (int)(width*2.0 / 3.0);

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

draw_roc_flag(img);

FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}

void draw_roc_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
int center_x = (int)(width/4);
int center_y = (int)(height/4);
// gdImageFilledEllipse 需以長寬方向的 diameter 作圖
// 由於中央白日圓形的半徑為青天寬度的 1/8
// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
int sun_radius = (int)(width/8);
// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
int white_circle_dia = sun_radius;
// 中央藍色圓形半徑為中央白日的 1又 2/15
int blue_circle_dia = white_circle_dia + white_circle_dia*2/15;
// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
white = gdImageColorAllocate(img, 255, 255, 255); // 白色
blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
// 根據畫布大小塗上紅色長方形區域
gdImageFilledRectangle(img, 0, 0, width, height, red);
// 青天面積為整面國旗的 1/4, 也是採用長方形塗色
gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
// 先設法以填色畫出六個白色堆疊菱形
draw_white_sun(img, center_x, center_y, sun_radius, white);
// 利用一個藍色大圓與白色小圓畫出藍色環狀
gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);

}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
// M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位
// 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度
float deg = M_PI/180;
// 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度
// 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小
float sr = sun_radius/tan(75*deg);
int ax, ay, bx, by, dx, dy, ex, ey;
gdPoint points[4];
/* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確
ax = center_x;
ay = center_y - sun_radius;
bx = center_x - sun_radius*tan(15*deg);
by = center_y;
ex = center_x;
ey = center_y + sun_radius;
dx = center_x + sun_radius*tan(15*deg);
dy = center_y;
// AB
gdImageLine(img, ax, ay, bx, by, color);
// BE
gdImageLine(img, bx, by, ex, ey, color);
// ED
gdImageLine(img, ex, ey, dx, dy, color);
// DA
gdImageLine(img, dx, dy, ax, ay, color);
*/
ax = center_x;
ay = center_y - sun_radius;
bx = center_x - sun_radius*tan(15*deg);
by = center_y;
ex = center_x;
ey = center_y + sun_radius;
dx = center_x + sun_radius*tan(15*deg);
dy = center_y;
// 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域
for (int i=1;i&lt;=6;i++){
// A
points[0].x = ax+sun_radius*sin(30*deg*i);
points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);
// B
points[1].x = bx+sr-sr*cos(30*deg*i);
points[1].y = by-sr*sin(30*deg*i);
// E
points[2].x = ex-sun_radius*sin(30*deg*i);
points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));
// D
points[3].x = dx-(sr-sr*cos(30*deg*i));
points[3].y = dy+sr*sin(30*deg*i);
// 對菱形區域範圍塗色
gdImageFilledPolygon(img, points, 4, color);
// 在菱形區域外圍畫線, 明確界定菱形範圍
gdImagePolygon(img, points, 4, color);
}</pre>
<p><br/><br/></p>
<p><img alt="" src="/images/roc_flag_in_gd.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

int main() {
int width = 800;
int height = (int)(width / 1.9);

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

draw_usa_flag(img);

FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "打开输出文件时出错。\n");
return 1;
}

gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);

return 0;
}

void draw_usa_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
// 国旗颜色
red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹
white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹
blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形

int stripe_height = 33 ;
int stripe_width = width ;
int star_size = (int)(0.0308 * height); // 星星大小

for (int y = 0; y &lt; height; y += stripe_height) {
if (y / stripe_height % 2 == 0) {
gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
} else {
gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
}
}

gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 698 / 100, blue);

int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距
int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距
int star_start_x = (int)(0.125 * height); // 星星的起始X位置
int star_start_y = (int)(0.06 * height); // 星星的起始Y位置

for (int row = 0; row &lt; 9; row++) {
int starsPerRow = (row % 2 == 0) ? 6 : 5;

// 计算2、4、6和8排星星的偏移量
int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;

for (int star = 0; star &lt; starsPerRow; star++) {
int x = star_start_x + star * star_spacing_x + offset_x;

// 旋转角度（以弧度为单位）
double rotation_angle = M_PI / 5; // 忘記多少度的旋转

int y = star_start_y + row * star_spacing_y;
draw_star(img, x, y, star_size, white, rotation_angle);
}
}
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
gdPoint points[10];

for (int i = 0; i &lt; 10; i++) {
double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;
int radius = (i % 2 == 0) ? size : size / 2;
points[i].x = x + radius * cos(angle);
points[i].y = y + radius * sin(angle);
}

// 用指定的颜色填充星星
gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><br/><br/></p>
<p><img alt="" height="211" src="/images/usa_flag.png" width="400"/></p>
<h1>week7</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_chinese_flag(gdImagePtr img);

int main() {
int width = 300; // 國旗寬度
int height = 200; // 國旗高度

gdImagePtr im = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(im, 0);

draw_chinese_flag(im);

FILE *outputFile = fopen("./../images/proc_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "打开输出文件时出错。\n");
return 1;
}

gdImagePngEx(im, outputFile, 9);
fclose(outputFile);
gdImageDestroy(im);

return 0;
}

// 声明 draw_star 函数
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

void draw_chinese_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, yellow;

// 國旗顏色
red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景
yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星

// 畫紅色背景
gdImageFilledRectangle(img, 0, 0, width, height, red);

// 設置星星的大小和位置
int star_size = (int)(0.28 * height);
int star_x = (int)(0.165 * width);
int star_y = (int)(0.265 * height);

// 畫大星星
draw_star(img, star_x, star_y, star_size, yellow, 11.0);

// 繪製小星星，位置根據實際國旗比例計算
double radius = 0.15 * height;
double angle = 360 / 7 * M_PI / 179.0;
double rotation = -M_PI / 7.5;
int cx = (int)(0.32 * width);
int cy = (int)(0.27 * height);

for (int i = -1; i &lt; 3; i++) {
int x = (int)(cx + radius * cos(i * angle + rotation));
int y = (int)(cy + radius * sin(i * angle + rotation));
draw_star(img, x, y, 19, yellow, M_PI / 5.0);
}
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
gdPoint points[10];

// 计算星形的五个外点和五个内点
double outer_radius = size / 2;
double inner_radius = size / 6;
double angle = M_PI / 5.0;

for (int i = 0; i &lt; 10; i++) {
double radius = (i % 2 == 0) ? outer_radius : inner_radius;
double theta = rotation_angle + i * angle;
points[i].x = x + radius * cos(theta);
points[i].y = y + radius * sin(theta);
}

// 使用 gdImageFilledPolygon 绘制星形
gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><br/><br/></p>
<p><img alt="" height="267" src="/images/proc_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_uk_flag(gdImagePtr img);
void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);

int main() {
// 设置国旗的宽和高
int width = 1200;
int height = width / 2;

// 创建图像
gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

// 绘制英国国旗
draw_uk_flag(img);

// 将图像保存到文件
FILE *outputFile = fopen("./../images/uk_flag.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "打开输出文件时发生错误。\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}



void draw_uk_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);

int red, white, blue;
red = gdImageColorAllocate(img, 204, 0, 0); // 红色
white = gdImageColorAllocate(img, 255, 255, 255); // 白色
blue = gdImageColorAllocate(img, 0, 0, 153); // 蓝色

gdImageFilledRectangle(img, 0, 0, width, height, blue);


int x1, y1, x2, y2, x3, y3;
{
int line_thickness = 100;
gdImageSetThickness(img, line_thickness);

int x1, y1, x2, y2, x3, y3;

// 绘制白色斜线
x1 = 0;
y1 = 600;
x2 = 1200;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, white);

x1 = 0;
y1 = 0;
x2 = 1200;
y2 = 600;
gdImageLine(img, x1, y1, x2, y2, white);
}
{
int line_thickness = 33;
gdImageSetThickness(img, line_thickness);


// 绘制红色斜线
x1 = 566;
y1 = 300;
x2 = 1166;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, red);

x1 = 1233;
y1 = 600;
x2 = 633;
y2 = 300;
gdImageLine(img, x1, y1, x2, y2, red);

x1 = 566;
y1 = 300;
x2 = -33;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, red);

x1 = 600;
y1 = 316.5;
x2 = 0;
y2 = 616.5;
gdImageLine(img, x1, y1, x2, y2, red);
}
{
int line_thickness = 33;
gdImageSetThickness(img, line_thickness);

int x1, y1, x2, y2, x3, y3;

// 绘制 斜线
x1 = 0;
y1 = 600;
x2 = 1200;
y2 = 0;
gdImageLine(img, x1, y1, x2, y2, red );


x1 = 1200;
y1 = 16.5;
x2 = 600;
y2 = 316.5;
gdImageLine(img, x1, y1, x2, y2, white);


x1 = 0;
y1 = 583.5;
x2 = 600;
y2 = 283.5;
gdImageLine(img, x1, y1, x2, y2, white);


}

// 绘制白色十字
int cross_width = width / 32;
int cross_arm_width = width / 32;
int center_x = width / 2;
int center_y = height / 2;

gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);
gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);

// 绘制红色十字
gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);
gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);
}</pre>
<p><br/><br/></p>
<p><img alt="" height="200" src="/images/uk_flag.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;

int main() {
// 國旗尺寸
int width = 1200;
int height = 600;

// 創建圖像
gdImagePtr img = gdImageCreate(width, height);

// 設置白色背景
int white = gdImageColorAllocate(img, 255, 255, 255);
gdImageFilledRectangle(img, 0, 0, width, height, white);

// 計算中間紅點的直徑和位置
int circleDiameter = height * 3 / 5;
int circleRadius = circleDiameter / 2;
int circleX = width / 2;
int circleY = height / 2;

// 設置紅色圓圈
int red = gdImageColorAllocate(img, 255, 0, 0);
gdImageFilledEllipse(img, circleX, circleY, circleDiameter, circleDiameter, red);

// 儲存圖像
FILE *output = fopen("japan_flag.png", "wb");
if (output == NULL) {
fprintf(stderr, "Error creating output file\n");
return 1;
}

gdImagePng(img, output);
fclose(output);

// 釋放記憶體
gdImageDestroy(img);

return 0;
}</pre>
<p><br/><br/></p>
<p><img alt="" height="200" src="/images/japan_flag.png" width="400"/></p>
<div class="line number1 index0 alt2"><code class="cpp preprocessor"></code></div>
<div class="line number359 index358 alt2">
<div class="line number1 index0 alt2">
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;
 
#define WIDTH 900
#define HEIGHT 600
#define FILENAME "south_korea_flag.png"
 
int main() {
    gdImagePtr im;
    FILE *pngout;
    int white, black, red, blue;
 
    im = gdImageCreate(WIDTH, HEIGHT);
 
    white = gdImageColorAllocate(im, 255, 255, 255);
    black = gdImageColorAllocate(im, 0, 0, 0);
    red = gdImageColorAllocate(im, 205, 0, 0);
    blue = gdImageColorAllocate(im, 0, 56, 168);
 
    // Background (white)
    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);
 
    // Blue Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);
 
    // Red Circle (Yin-Yang Symbol)
    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);
 
  int circleX = 385;    // 圓心的 X 座標
  int circleY = 262.5;   // 圓心的 Y 座標
  int circleRadius = 75;    
 
  // 繪製圓形
  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);
 
  int circleX2 = 515;    // 圓心的 X 座標
 
 int circleY2 = 337.5;
 
  // 繪製圓形
  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);
 
  {
 
 
  // 起點和終點位置
 
  int startX = 340;   
  // 線的起點 X 座標
 
  int startY = 90;  
  // 線的起點 Y 座標
 
  int endX = 200;    
  // 線的終點 X 座標
 
  int endY = 260;    
  // 線的終點 Y 座標
 
  int lineWidth = 23;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);
 
  int startX2 = 213;   
  // 線的起點 X 座標
 
  int startY2 = 270;  
  // 線的起點 Y 座標
 
  int endX2 = 133;    
  // 線的終點 X 座標
 
  int endY2 = 210;    
  // 線的終點 Y 座標
 
  int lineWidth2 = 25;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);
 
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);
 
  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);
 
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);
 
  gdImageSetThickness(im, lineWidth +12);
gdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);
}
  {
    // 起點和終點位置
 
  int startX = 330;   
  // 線的起點 X 座標
 
  int startY = 520;  
  // 線的起點 Y 座標
 
  int endX = 190;    
  // 線的終點 X 座標
 
  int endY = 350;    
  // 線的終點 Y 座標
 
  int lineWidth = 23;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);
 
  int startX2 = 213;   
  // 線的起點 X 座標
 
  int startY2 = 330;  
  // 線的起點 Y 座標
 
  int endX2 = 133;    
  // 線的終點 X 座標
 
  int endY2 = 390;    
  // 線的終點 Y 座標
 
  int lineWidth2 = 25;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);
 
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);
 
  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);
 
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);
 
  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);
 
    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);
 
  }
 
  {
    // 起點和終點位置
 
  int startX = 564;   
  // 線的起點 X 座標
 
  int startY = 520;  
  // 線的起點 Y 座標
 
  int endX = 704;    
  // 線的終點 X 座標
 
  int endY = 350;    
  // 線的終點 Y 座標
 
  int lineWidth = 23;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);
 
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
 
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);
 
gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 400, 734, 490, white);
 
  int startX2 = 553;   
  // 線的起點 X 座標
 
  int startY2 = 330;  
  // 線的起點 Y 座標
 
  int endX2 = 633;    
  // 線的終點 X 座標
 
  int endY2 = 390;    
  // 線的終點 Y 座標
 
  int lineWidth2 = 25;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);
 
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);
 
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);
 
  gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);
  }
  {
    // 起點和終點位置
 
  int startX = 330;   
  // 線的起點 X 座標
 
  int startY = 520;  
  // 線的起點 Y 座標
 
  int endX = 190;    
  // 線的終點 X 座標
 
  int endY = 350;    
  // 線的終點 Y 座標
 
  int lineWidth = 23;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);
 
  int startX2 = 213;   
  // 線的起點 X 座標
 
  int startY2 = 330;  
  // 線的起點 Y 座標
 
  int endX2 = 133;    
  // 線的終點 X 座標
 
  int endY2 = 390;    
  // 線的終點 Y 座標
 
  int lineWidth2 = 25;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);
 
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);
 
  gdImageSetThickness(im, lineWidth );
gdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);
 
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);
 
  gdImageSetThickness(im, lineWidth +14);
gdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);
 
    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 232, 426, 206, 448, white);
 
  }
  {
    // 起點和終點位置
 
  int startX = 564;   
  // 線的起點 X 座標
 
  int startY = 97;  
  // 線的起點 Y 座標
 
  int endX = 704;    
  // 線的終點 X 座標
 
  int endY = 267;    
  // 線的終點 Y 座標
 
  int lineWidth = 23;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);
 
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX, startY, endX, endY, black);
 
    gdImageSetThickness(im, lineWidth -10);
gdImageLine(im, 624, 212, 734, 118, white);
 
    // 繪製線段
  gdImageSetThickness(im, lineWidth);
  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);
 
  int startX2 = 553;   
  // 線的起點 X 座標
 
  int startY2 = 277;  
  // 線的起點 Y 座標
 
  int endX2 = 633;    
  // 線的終點 X 座標
 
  int endY2 = 217;    
  // 線的終點 Y 座標
 
  int lineWidth2 = 25;  // 線的寬度
 
  // 繪製線段
  gdImageSetThickness(im, lineWidth +8);
  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);
 
  gdImageSetThickness(im, lineWidth +10);
gdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);
 
  gdImageSetThickness(im, lineWidth);
gdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);
 
    gdImageSetThickness(im, lineWidth +30);
gdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);
 
  }
 
    // Save image
FILE *outputFile = fopen("./../images/korea_flag.png", "wb");
if (outputFile == NULL) {
    fprintf(stderr, "Error opening the output file.\n");
    return 1;
}
  gdImagePngEx(im, outputFile, 9);
      fclose(outputFile);
      gdImageDestroy(im);
      return 0;
  }
</pre>
<br/><img alt="" height="267" src="/images/korea_flag.png" width="400"/></div>
</div>
<h1>week13</h1>
<div class="line number1 index0 alt2">
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
#include &lt;stdio.h&gt;
 
// 主函式
int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }
 
    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time
 
    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;
 
        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);
 
        t += dt;
    }
 
    // Close the data file
    fclose(outputFile);
 
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }
 
    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");
 
    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);
 
    return 0;
}</pre>
</div>
<p><img alt="" height="200" src="/images/motion_plot.png" width="400"/></p>
<h1>week15</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
// width 3: height 2
int width = 1200;
// 國旗長寬比為 3:2
int height = (int)(width * 2.0 / 3.0);

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

draw_roc_flag(img);

FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}

void draw_roc_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
int center_x = (int)(width / 4);
int center_y = (int)(height / 4);
// gdImageFilledEllipse 需以長寬方向的 diameter 作圖
// 由於中央白日圓形的半徑為青天寬度的 1/8
// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
int sun_radius = (int)(width / 8);
// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
int white_circle_dia = sun_radius;
// 中央藍色圓形半徑為中央白日的 1又 2/15
int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;
// 將中央藍色圓的半徑改為2倍
blue_circle_dia *= 2;

// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
white = gdImageColorAllocate(img, 255, 255, 255); // 白色
blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
// 根據畫布大小塗上紅色長方形區域
gdImageFilledRectangle(img, 0, 0, width, height, red);
// 青天面積為整面國旗的 1/4, 也是採用長方形塗色
gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);
// 先設法以填色畫出六個白色堆疊菱形
draw_white_sun(img, center_x, center_y, sun_radius, white);
// 利用一個藍色大圓與白色小圓畫出藍色環狀
gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);

// 直線連接第二組ABED點
gdImageLine(img, 429, 125, 279, 165, white);
gdImageLine(img, 279, 165, 170, 274, white);
gdImageLine(img, 170, 274, 170, 274, white); // 重複的點
gdImageLine(img, 170, 274, 429, 125, white);
}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
float deg = M_PI / 180;
float sr = sun_radius / tan(75 * deg);
int ax, ay, bx, by, dx, dy, ex, ey;
gdPoint points[4];

ax = center_x;
ay = center_y - sun_radius;
printf("%d,%d\n", ax, ay);
bx = center_x - sun_radius * tan(15 * deg);
by = center_y;
ex = center_x;
ey = center_y + sun_radius;
dx = center_x + sun_radius * tan(15 * deg);
dy = center_y;

for (int i = 1; i &lt;= 6; i++) {
points[0].x = ax + sun_radius * sin(30 * deg * i);
points[0].y = ay + sun_radius - sun_radius * cos(30 * deg * i);
printf("A coord: (%d,%d)\n", points[0].x, points[0].y);

points[1].x = bx + sr - sr * cos(30 * deg * i);
points[1].y = by - sr * sin(30 * deg * i);
printf("B coord: (%d,%d)\n", points[1].x, points[1].y);

points[2].x = ex - sun_radius * sin(30 * deg * i);
points[2].y = ey - (sun_radius - sun_radius * cos(30 * deg * i));
printf("E coord: (%d,%d)\n", points[2].x, points[2].y);

points[3].x = dx - (sr - sr * cos(30 * deg * i));
points[3].y = dy + sr * sin(30 * deg * i);
printf("D coord: (%d,%d)\n\n", points[2].x, points[2].y);

gdImageFilledPolygon(img, points, 4, color);
gdImagePolygon(img, points, 4, color);
}
}

</pre>
<p><br/><img alt="" height="267" src="/images/roc_flag_in_gd.png" width="400"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
// width 3: height 2
int width = 1200;
// 國旗長寬比為 3:2
int height = (int)(width*2.0 / 3.0);

gdImagePtr img = gdImageCreateTrueColor(width, height);
gdImageAlphaBlending(img, 0);

draw_roc_flag(img);

FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");
if (outputFile == NULL) {
fprintf(stderr, "Error opening the output file.\n");
return 1;
}
gdImagePngEx(img, outputFile, 9);
fclose(outputFile);
gdImageDestroy(img);
return 0;
}

void draw_roc_flag(gdImagePtr img) {
int width = gdImageSX(img);
int height = gdImageSY(img);
int red, white, blue;
// 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
int center_x = (int)(width/4);
int center_y = (int)(height/4);
// gdImageFilledEllipse 需以長寬方向的 diameter 作圖
// 由於中央白日圓形的半徑為青天寬度的 1/8
// 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
// 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
int sun_radius = (int)(width/8);
// 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
int white_circle_dia = sun_radius;
// 中央藍色圓形半徑為中央白日的 1又 2/15
int blue_circle_dia = white_circle_dia + white_circle_dia*2/15;
// 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
white = gdImageColorAllocate(img, 255, 255, 255); // 白色
blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
// 根據畫布大小塗上紅色長方形區域
gdImageFilledRectangle(img, 0, 0, width, height, red);
// 青天面積為整面國旗的 1/4, 也是採用長方形塗色
gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
{int x1 = 429;
int y1 = 125;
int x2 = 279;
int y2 = 165;

// 畫一條線連接兩個點
gdImageLine(img, x1, y1, x2, y2, white);
}
{int x1 = 170;
int y1 = 274;
int x2 = 279;
int y2 = 165;

// 畫一條線連接兩個點
gdImageLine(img, x1, y1, x2, y2, white);
}
{
int x1 = 170;
int y1 = 274;
int x2 = 429;
int y2 = 125;

// 畫一條線連接兩個點
gdImageLine(img, x1, y1, x2, y2, white);
}
// 利用一個藍色大圓與白色小圓畫出藍色環狀
gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);


// 定義座標結構
typedef struct {
double x;
double y;
} Point;

// 計算圓與線的交點
void circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) {
// 直線斜率
double m = (y2 - y1) / (x2 - x1);

// 直線方程式中的常數項
double b = y1 - m * x1;

// 圓與直線交點的計算
double A = 1 + pow(m, 2);
double B = 2 * (m * b - m * k - h);
double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2);

// 判斷交點個數
double discriminant = pow(B, 2) - 4 * A * C;
if (discriminant &gt; 0) {
double x_intersect1 = (-B + sqrt(discriminant)) / (2 * A);
double y_intersect1 = m * x_intersect1 + b;
printf("交點: (%.2f, %.2f)\n", x_intersect1, y_intersect1);

double x_intersect2 = (-B - sqrt(discriminant)) / (2 * A);
double y_intersect2 = m * x_intersect2 + b;
printf("交點: (%.2f, %.2f)\n", x_intersect2, y_intersect2);
} else if (discriminant == 0) {
double x_intersect = -B / (2 * A);
double y_intersect = m * x_intersect + b;
printf("交點: (%.2f, %.2f)\n", x_intersect, y_intersect);
} else {
printf("No points.\n");
}

}


// 圓的參數
double circle_x = (int)(width/4); // 圓心 x 座標
double circle_y = (int)(height/4); // 圓心 y 座標
double radius = white_circle_dia + white_circle_dia*2/15; // 圓半徑

// 兩點座標



double x3 = 170;
double y3 = 274;
double x4 = 279;
double y4 = 165;

circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3);


double x5 = 279;
double y5 = 165;
double x6 = 429;
double y6 = 125;

circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5);






}</pre>
<p><br/><br/></p>
<p>交點: (388.90, 55.10)<br/>交點: (155.10, 288.90)<br/>交點: (449.72, 119.47)<br/>交點: (130.07, 204.72)</p>
<h1>C_EX</h1>
<p>1.#include &lt;stdio.h&gt;<br/>void main()<br/>{<br/>int a;<br/>a = 3;<br/>printf("%d\n", !a );<br/>a = 0;<br/>printf("%d\n", !a );<br/>}</p>
<p><img alt="" height="122" src="/images/螢幕擷取畫面 2023-12-26 203456.png" width="433"/></p>
<p>2.#include &lt;stdio.h&gt;<br/>void main()<br/>{<br/>printf("%d\n", 1 &amp;&amp; 3 );<br/>printf("%d\n", 0 &amp;&amp; 0 );<br/>printf("%d\n", 2 &amp;&amp; 2 );<br/>}</p>
<p><img alt="" height="142" src="/images/螢幕擷取畫面 2023-12-26 203645.png" width="425"/></p>
<p>3.</p>
<div class="line number1 index0 alt2"><code class="cpp preprocessor">#include &lt;stdio.h&gt;</code></div>
<div class="line number2 index1 alt1"><code class="cpp keyword bold">void</code> <code class="cpp plain">main()</code></div>
<div class="line number3 index2 alt2"><code class="cpp plain">{</code></div>
<div class="line number4 index3 alt1"><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"%d\n"</code><code class="cpp plain">, 1 || 0 );</code></div>
<div class="line number5 index4 alt2"><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"%d\n"</code><code class="cpp plain">, 0 || 0 );</code></div>
<div class="line number6 index5 alt1"><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"%d\n"</code><code class="cpp plain">, 2 || 2 );</code></div>
<div class="line number7 index6 alt2"><code class="cpp plain">}</code></div>
<div class="line number7 index6 alt2"><code class="cpp plain"><img alt="" height="142" src="/images/螢幕擷取畫面 2023-12-26 203645.png" width="425"/></code></div>
<div class="line number7 index6 alt2"><code class="cpp plain">4.</code></div>
<div class="line number7 index6 alt2"><code class="cpp plain">#include &lt;stdio.h&gt;<br/>void main()<br/>{<br/>char a;<br/>printf( " The size of int is %d \n", sizeof(int) );<br/>printf( " The size of char a is %d \n", sizeof(a) );<br/>}</code></div>
<div class="line number7 index6 alt2"><code class="cpp plain"><img alt="" height="100" src="/images/螢幕擷取畫面 2023-12-26 204121.png" width="419"/></code></div>
<div class="line number7 index6 alt2"><code class="cpp plain">5.</code></div>
<div class="line number7 index6 alt2">
<div class="line number1 index0 alt2"><code class="cpp preprocessor">#include &lt;stdio.h&gt;</code></div>
<div class="line number2 index1 alt1"> </div>
<div class="line number3 index2 alt2"><code class="cpp color1 bold">int</code> <code class="cpp plain">main() {</code></div>
<div class="line number4 index3 alt1"><code class="cpp spaces">    </code><code class="cpp color1 bold">char</code> <code class="cpp plain">ch; </code></div>
<div class="line number5 index4 alt2"><code class="cpp spaces">    </code><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"input a char: "</code><code class="cpp plain">);</code></div>
<div class="line number6 index5 alt1"><code class="cpp spaces">    </code><code class="cpp functions bold">scanf</code><code class="cpp plain">(</code><code class="cpp string">"%c"</code><code class="cpp plain">, &amp;ch);</code></div>
<div class="line number7 index6 alt2"><code class="cpp spaces">    </code><code class="cpp keyword bold">if</code> <code class="cpp plain">(ch == </code><code class="cpp string">'a'</code><code class="cpp plain">) {</code></div>
<div class="line number8 index7 alt1"><code class="cpp spaces">        </code><code class="cpp functions bold">printf</code><code class="cpp plain">(</code><code class="cpp string">"You pressed 'a'\n"</code><code class="cpp plain">);</code></div>
<div class="line number9 index8 alt2"><code class="cpp spaces">    </code><code class="cpp plain">}</code></div>
<div class="line number10 index9 alt1"><code class="cpp spaces">    </code><code class="cpp keyword bold">return</code> <code class="cpp plain">0;</code></div>
<div class="line number11 index10 alt2"><code class="cpp plain">}</code></div>
<div class="line number11 index10 alt2"><code class="cpp plain"><img alt="" height="83" src="/images/螢幕擷取畫面 2023-12-26 204314.png" width="395"/></code></div>
<div class="line number11 index10 alt2"><code class="cpp plain">6.</code></div>
<div class="line number11 index10 alt2"><code class="cpp plain"><code class="cpp plain"></code></code>
<div class="line number1 index0 alt2"><code class="cpp preprocessor"></code></div>
#include &lt;stdio.h&gt;<br/><br/>int main() {<br/> char ch; // 宣告一個字符型變數 ch<br/><br/> // 提示用戶輸入一個字符<br/> printf("輸入一個字符：");<br/><br/> // 檢查 scanf 的返回值，確保成功讀取了一個字符<br/> if (scanf("%c", &amp;ch) != 1) {<br/> fprintf(stderr, "錯誤：無法讀取字符。\n");<br/> return 1; // 返回錯誤碼<br/> }<br/><br/> // 檢查輸入的字符是否為 'a'<br/> if (ch == 'a') {<br/> printf("你輸入的是 'a'\n"); // 如果是 'a'，則印出相應的消息<br/> } else {<br/> printf("你輸入的不是 'a'\n"); // 如果不是 'a'，則印出相應的消息<br/> }<br/><br/> return 0;<br/>}</div>
<div class="line number11 index10 alt2"><img alt="" height="259" src="/images/螢幕擷取畫面 2023-12-26 204548.png" width="431"/></div>
<div class="line number11 index10 alt2">7.</div>
<div class="line number11 index10 alt2">#include &lt;stdio.h&gt;<br/><br/>int main() {<br/> int i; // 宣告一個整數變數 i<br/><br/> // 提示用戶輸入一個整數<br/> printf("輸入一個整數：");<br/><br/> // 檢查 scanf 的返回值，確保成功讀取了一個整數<br/> if (scanf("%d", &amp;i) != 1) {<br/> fprintf(stderr, "錯誤：無法讀取整數。\n");<br/> return 1; // 返回錯誤碼<br/> }<br/><br/> // 根據 i 的值進行不同的判斷<br/> if (i &lt; 100) {<br/> printf("i &lt; 100\n");<br/> } else {<br/> if ((i &gt;= 100) &amp;&amp; (i &lt; 200)) {<br/> printf("i &gt;= 100 and i &lt; 200\n");<br/> } else {<br/> printf("i &gt;= 200\n");<br/> }<br/> }<br/><br/> return 0;<br/>}</div>
</div>
<p><img alt="" height="304" src="/images/螢幕擷取畫面 2023-12-26 204836.png" width="399"/></p>
<p>8.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/> char c; // 宣告一個字符型變數 c</p>
<p>// 提示用戶輸入一個字符<br/> printf("輸入一個字符：");</p>
<p>// 檢查 scanf 的返回值，確保成功讀取了一個字符<br/> if (scanf(" %c", &amp;c) != 1) {<br/> fprintf(stderr, "錯誤：無法讀取字符。\n");<br/> return 1; // 返回錯誤碼<br/> }</p>
<p>// 使用 switch 陳述式根據讀取的字符執行相應的分支<br/> switch(c) {<br/> case 'a':<br/> printf("你按下了 'a'\n");<br/> break;<br/> case 'b':<br/> printf("你按下了 'b'\n");<br/> break;<br/> case 'c':<br/> printf("你按下了 'c'\n");<br/> break;<br/> default:<br/> printf("不是 'a'、'b' 或 'c'\n");<br/> break;<br/> }</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="175" src="/images/螢幕擷取畫面 2023-12-26 205204.png" width="419"/></p>
<p>9.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/> char c; // 宣告一個字符型變數 c</p>
<p>// 提示用戶輸入一個字符<br/> printf("輸入一個字符：");</p>
<p>// 檢查 scanf 的返回值，確保成功讀取了一個字符<br/> if (scanf(" %c", &amp;c) != 1) {<br/> fprintf(stderr, "錯誤：無法讀取字符。\n");<br/> return 1; // 返回錯誤碼<br/> }</p>
<p>// 使用 switch 陳述式根據讀取的字符執行相應的分支<br/> switch(c) {<br/> case 'a':<br/> printf("你按下了 'a'\n");<br/> break;<br/> case 'b':<br/> printf("你按下了 'b'\n");<br/> break;<br/> case 'c':<br/> printf("你按下了 'c'\n");<br/> break;<br/> default:<br/> printf("不是 'a'、'b' 或 'c'\n");<br/> break;<br/> }</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="364" src="/images/螢幕擷取畫面 2023-12-26 205424.png" width="460"/></p>
<p>10.</p>
<p>#include&lt;stdio.h&gt;</p>
<p>void main() {<br/> int i;<br/> for (i = 0; i &lt; 6; i++) {<br/> printf("%d\n", i); /* 印出 i */<br/> }<br/>}</p>
<p><img alt="" height="235" src="/images/螢幕擷取畫面 2023-12-26 205537.png" width="431"/></p>
<h4><span></span></h4>
<p></p>
<h1>ANSIC</h1>
<p></p>
<p>1.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() <br/>{<br/> // Print Name<br/> printf("Name : Alexandra Abramov\n");</p>
<p>// Print Date of Birth<br/> printf("DOB : July 14, 1975\n");</p>
<p>// Print Mobile Number<br/> printf("Mobile : 99-9999999999\n");</p>
<p>// Indicate successful execution<br/> return(0); <br/>}</p>
<p><img alt="" height="196" src="/images/螢幕擷取畫面 2023-12-26 170525.png" width="540"/></p>
<ul class="w3r_list">
<li><span>#include &lt;stdio.h&gt;：此行包含標準輸入輸出庫，其中包含從控制台讀取和寫入資料的函數。</span></li>
<li><span>int main()：這是程式的主函數，從這裡開始執行。它傳回一個整數值，通常為 0，表示執行成功。</span></li>
<li><span>在「main()」函數內部，有三個printf語句。“printf()”函數用於將格式化文字列印到控制台。每個 printf 語句列印一行包含特定資訊的文字：</span></li>
<ul class="w3r_list">
<li><span>printf("姓名：亞歷珊卓·阿布拉莫夫\n");<span> </span>列印“Name : Alexandra Abramov”，後面跟著換行符，將遊標移到下一行。</span></li>
<li><span>printf("出生日期：1975 年 7 月 14 日\n");<span> </span>印出“DOB : July 14, 1975”，後面跟著換行符。</span></li>
<li><span>printf("手機: 99-9999999999\n");<span> </span>列印“Mobile : 99-9999999999”，後面跟著換行符。</span></li>
</ul>
<li><span>return(0);：這一行表示主函數結束，回傳0。</span></li>
</ul>
<p><span>2.</span></p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main(int argc, char** argv) {<br/> // Check for C standard version<br/> #if __STDC_VERSION__ &gt;= 201710L<br/> printf("We are using C18!\n");<br/> #elif __STDC_VERSION__ &gt;= 201112L<br/> printf("We are using C11!\n");<br/> #elif __STDC_VERSION__ &gt;= 199901L<br/> printf("We are using C99!\n");<br/> #else<br/> printf("We are using C89/C90!\n");<br/> #endif</p>
<p>// Indicate successful execution<br/> return 0;<br/>}</p>
<p><img alt="" height="130" src="/images/螢幕擷取畫面 2023-12-26 170841.png" width="472"/></p>
<ul class="w3r_list">
<li><span>＃include</span><stdio.h><span>：這一行包含標準輸入輸出庫，這是使用「printf」所必需的。</span></stdio.h></li>
<li><span>int main(int argc, char** argv)：這是帶有命令列參數 argc 和 argv 的 main 函數。但是，在此程式碼中，未使用這些參數。</span></li>
<li><span>程式碼使用預處理器指令（#if、#elif、#else 和 #endif）根據編譯器偵測到的 C 標準版本有條件地編譯不同的列印語句：</span></li>
<ul class="w3r_list">
<li><span>#if __STDC_VERSION__ &gt;= 201710L 檢查 C 標準版本是否大於或等於 C18 (2017)。如果為真，則會列印「我們正在使用 C18！」。</span></li>
<li><span>#elif __STDC_VERSION__ &gt;= 201112L 檢查 C 標準版本是否大於或等於 C11 (2011)。如果為 true，則會列印「We are using C11!」。</span></li>
<li><span>#elif __STDC_VERSION__ &gt;= 199901L 檢查 C 標準版本是否大於或等於 C99 (1999)。如果為 true，則會列印「We are using C99!」。</span></li>
<li><span>#else 是一個後備條件，如果上述條件均不滿足，則觸發該條件。它列印“我們正在使用 C89/C90！”。</span></li>
</ul>
<li><span>return 0;：這一行表示main函數結束，向作業系統回傳0，表示程式執行成功。</span></li>
</ul>
<p><span>3.</span></p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main()<br/>{<br/> // 印出一行井號<br/> printf("######\n");</p>
<p>// 印出一個單獨的井號<br/> printf("#\n");</p>
<p>// 印出一個單獨的井號<br/> printf("#\n");</p>
<p>// 印出一行井號<br/> printf("#####\n");</p>
<p>// 印出一個單獨的井號<br/> printf("#\n");</p>
<p>// 印出一個單獨的井號<br/> printf("#\n");</p>
<p>// 印出一個單獨的井號<br/> printf("#\n");</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="267" src="/images/螢幕擷取畫面 2023-12-26 171114.png" width="495"/></p>
<p>4.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/> int radius; /* Variable to store the radius of the circle */<br/> float area, perimeter; /* Variables to store the area and perimeter of the circle */ <br/> radius = 6; /* Assigning a value to the radius */</p>
<p>/* Calculating the perimeter of the circle */<br/> perimeter = 2 * 3.14 * radius;<br/> printf("Perimeter of the Circle = %f inches\n", perimeter);</p>
<p>/* Calculating the area of the circle */<br/> area = 3.14 * radius * radius;<br/> printf("Area of the Circle = %f square inches\n", area);</p>
<p>return(0);<br/>}</p>
<p><img alt="" height="161" src="/images/螢幕擷取畫面 2023-12-26 171544.png" width="669"/></p>
<p><span>在上面的練習中 -</span></p>
<ul class="w3r_list">
<li><span><span>程式包括標準輸入/輸出庫&lt;stdio.h&gt;。</span></span></li>
<li><span><span>它聲明了幾個變數：</span></span></li>
<ul class="w3r_list">
<li><span><span>int radius：表示圓半徑。</span></span></li>
<li><span><span>浮動面積和浮動週長：將儲存計算出的圓的面積和周長。</span></span></li>
</ul>
<li><span><span>在“main()”函數中：</span></span></li>
<ul class="w3r_list">
<li><span><span>它將值 6 分配給“radius”變量，表示圓的半徑。</span></span></li>
</ul>
<li><span><span>然後程式計算圓的周長和麵積：</span></span></li>
<ul class="w3r_list">
<li><span><span>週長：它使用公式 2*3.14* 半徑來計算圓的周長，並將結果儲存在「週長」變數中。</span><span>這裡，3.14 是數學常數 π (pi) 的近似值。</span></span></li>
<li><span><span>面積：使用公式 3.14*radius*radius (π * r^2) 計算面積，並將結果儲存於「area」變數中。</span></span></li>
</ul>
<li><span><span>最後，程式使用“printf()”函數顯示計算值：</span></span></li>
<ul class="w3r_list">
<li><span><span>它會列印計算出的周長並顯示一條訊息：「圓的周長 = [週長] 英吋」。</span></span></li>
<li><span><span>它會列印計算出的面積並顯示一條訊息：“圓的面積 = [面積] 平方英吋。”</span></span></li>
</ul>
<li><span><span>程式返回0表示執行成功。</span></span></li>
</ul>
<p>5.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() <br/>{<br/> // 宣告並初始化字符變數<br/> char char1 = 'X';<br/> char char2 = 'M';<br/> char char3 = 'L';</p>
<p>// 印出原始和反向字符<br/> printf("The reverse of %c%c%c is %c%c%c\n",<br/> char1, char2, char3,<br/> char3, char2, char1);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="97" src="/images/螢幕擷取畫面 2023-12-26 172753.png" width="487"/></p>
<p><span>#include &lt;stdio.h&gt; - 此程式碼包含標準輸入/輸出庫 &lt;stdio.h&gt;。</span></p>
<ul class="w3r_list">
<li><span><span>在“main()”函數中，它聲明了三個字元變數：“char1”、“char2”和“char3”，並分別為它們賦值“X”、“M”和“L”。</span></span></li>
<li><span><span>它使用“printf()”函數來顯示格式化訊息。</span><span>該訊息包含由 %c 指定的佔位符，它們代表字元。</span></span></li>
<li><span><span>在「printf()」函數內部，它提供了替代佔位符的值。</span><span>在本例中，它提供了“char1”、“char2”和“char3”，後面跟著它們的相反順序：“char3”、“char2”和“char1”。</span></span></li>
<li><span><span>程式將會列印：“XML 的反向是 LMX”，因為它以相反的順序交換字元。</span></span></li>
<li><span><span>最後main函數傳回0表示程式執行成功。</span></span></li>
</ul>
<p><span><span>6.</span></span></p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main()<br/>{<br/> int a = 125, b = 12345; /* 宣告並初始化整數變數 */<br/> long ax = 1234567890; /* 宣告並初始化長整數變數 */<br/> short s = 4043; /* 宣告並初始化短整數變數 */<br/> float x = 2.13459; /* 宣告並初始化浮點數變數 */<br/> double dx = 1.1415927; /* 宣告並初始化雙精度浮點數變數 */<br/> char c = 'W'; /* 宣告並初始化字符變數 */<br/> unsigned long ux = 2541567890; /* 宣告並初始化無符號長整數變數 */</p>
<p>/* 各種算術運算和類型轉換 */<br/> printf("a + c = %d\n", a + c);<br/> printf("x + c = %f\n", x + c);<br/> printf("dx + x = %f\n", dx + x);<br/> printf("((int) dx) + ax = %ld\n", ((int) dx) + ax);<br/> printf("a + x = %f\n", a + x);<br/> printf("s + b = %d\n", s + b);<br/> printf("ax + b = %ld\n", ax + b);<br/> printf("s + c = %hd\n", s + c);<br/> printf("ax + c = %ld\n", ax + c);<br/> printf("ax + ux = %lu\n", ax + ux);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="349" src="/images/螢幕擷取畫面 2023-12-26 173004.png" width="469"/></p>
<p>7.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main()<br/>{<br/> int days, years, weeks;</p>
<p>days = 1329; // Total number of days</p>
<p>// Converts days to years, weeks and days<br/> years = days/365; // Calculate years<br/> weeks = (days % 365)/7; // Calculate weeks<br/> days = days - ((years*365) + (weeks*7)); // Calculate remaining days</p>
<p>// Print the results<br/> printf("Years: %d\n", years);<br/> printf("Weeks: %d\n", weeks);<br/> printf("Days: %d \n", days);</p>
<p>return 0;<br/>}<img alt="" height="149" src="/images/螢幕擷取畫面 2023-12-26 173351.png" width="462"/></p>
<p><span>在上面的練習中 -</span></p>
<ul class="w3r_list">
<li><span><span>程式包括標準輸入/輸出庫&lt;stdio.h&gt;。</span></span></li>
<li><span><span>它聲明了三個整數變數：</span></span></li>
<ul class="w3r_list">
<li><span><span>int days：此變數儲存要轉換的總天數。</span></span></li>
<li><span><span>intyear：儲存計算出的年數。</span></span></li>
<li><span><span>int week：儲存計算出的周數。</span></span></li>
</ul>
<li><span><span>程式用 1329 初始化“days”變數。</span></span></li>
<li><span><span>然後它會轉換：</span></span></li>
<ul class="w3r_list">
<li><span><span>年=天/365：此除法計算給定天數中的年數。</span><span>由於一年大約有 365 天，因此這種劃分給出了年數的估計。</span></span></li>
<li><span><span>週 = (天 % 365) / 7：計算出年份後，程式使用模運算子 % 來找出無法用完整年份表示的剩餘天數。</span><span>然後將該餘數除以 7 來計算週數。</span></span></li>
<li><span><span>最後，減去年和周所佔的天數即可得到剩餘的天數。</span></span></li>
</ul>
<li><span><span>程式使用 printf 語句來顯示計算值：</span></span></li>
<ul class="w3r_list">
<li><span><span>它會列印年數並顯示以下訊息：“年：[年]。”</span></span></li>
<li><span><span>它會列印週數並顯示以下訊息：“週：[週]。”</span></span></li>
<li><span><span>它會列印剩餘天數並顯示以下訊息：“天數：[天]。”</span></span></li>
</ul>
<li><span><span>程式返回0表示執行成功。</span></span></li>
</ul>
<p><span><span>8.</span></span></p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/> int x, y;<br/> int result1, result2; // 用于存储 scanf 的返回值</p>
<p>// 获取第一个整数<br/> printf("Input the first integer: ");<br/> result1 = scanf("%d", &amp;x);<br/> if (result1 != 1) {<br/> printf("Error: Please enter an integer.\n");<br/> return 1;<br/> }</p>
<p>// 获取第二个整数<br/> printf("Input the second integer: ");<br/> result2 = scanf("%d", &amp;y);<br/> if (result2 != 1) {<br/> printf("Error: Please enter an integer.\n");<br/> return 1;<br/> }</p>
<p>// 计算并输出它们的和<br/> printf("Sum of the two integers = %d\n", x + y);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="147" src="/images/螢幕擷取畫面 2023-12-26 174055.png" width="479"/></p>
<p>9.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/> int x, y;<br/> int result_x, result_y; // 用於儲存 scanf 的返回值</p>
<p>// 獲取第一個整數<br/> printf("輸入第一個整數：");<br/> result_x = scanf("%d", &amp;x);<br/> if (result_x != 1) {<br/> printf("錯誤：請輸入整數。\n");<br/> return 1;<br/> }</p>
<p>// 獲取第二個整數<br/> printf("輸入第二個整數：");<br/> result_y = scanf("%d", &amp;y);<br/> if (result_y != 1) {<br/> printf("錯誤：請輸入整數。\n");<br/> return 1;<br/> }</p>
<p>// 計算並輸出它們的乘積<br/> printf("這兩個整數的乘積 = %d\n", x * y);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="144" src="/images/螢幕擷取畫面 2023-12-26 174217.png" width="488"/></p>
<p>10.</p>
<p>#include &lt;stdio.h&gt;</p>
<p>int main() {<br/> char id[10]; // 用於存儲員工ID的變數（最多10個字符）<br/> int hour; // 用於存儲工作時數的變數<br/> double value, salary; // 用於每小時薪資和總薪資的變數</p>
<p>// 提示使用者輸入員工ID<br/> printf("輸入員工ID（最多10個字符）：");</p>
<p>// 檢查scanf的返回值<br/> if (scanf("%9s", id) != 1) {<br/> fprintf(stderr, "錯誤：無法讀取員工ID。\n");<br/> return 1; // 返回錯誤碼<br/> }</p>
<p>// 提示使用者輸入工作時數<br/> printf("\n輸入工作時數：");</p>
<p>// 檢查scanf的返回值<br/> if (scanf("%d", &amp;hour) != 1) {<br/> fprintf(stderr, "錯誤：無法讀取工作時數。\n");<br/> return 1; // 返回錯誤碼<br/> }</p>
<p>// 提示使用者輸入每小時薪資<br/> printf("\n每小時薪資：");</p>
<p>// 檢查scanf的返回值<br/> if (scanf("%lf", &amp;value) != 1) {<br/> fprintf(stderr, "錯誤：無法讀取每小時薪資。\n");<br/> return 1; // 返回錯誤碼<br/> }</p>
<p>// 計算總薪資<br/> salary = value * hour;</p>
<p>// 印出員工ID和薪資<br/> printf("\n員工ID = %s\n薪資 = U$ %.2lf\n", id, salary);</p>
<p>return 0;<br/>}</p>
<p><img alt="" height="290" src="/images/螢幕擷取畫面 2023-12-26 174452.png" width="457"/></p>
<h1>期末總結</h1>
<p>41223215 吳承睿 75分 我在自己的網站有把老師的作業幾乎都做出來</p>
<p><span>A: 是否</span><span>按照進度明確標示倉儲的改版歷程:沒 我好幾次忘記推 所以在學期末一併推上去</span></p>
<p><span><img alt="" height="113" src="/images/螢幕擷取畫面 2023-12-29 001258.png" width="200"/></span></p>
<p><span>B: 是否根據 <span>IPv4 與 IPv6</span><span><span> </span>網路環境設定進行作法討論:有</span></span></p>
<p><span><span><img alt="" height="113" src="/images/螢幕擷取畫面 2023-12-29 001424.png" width="200"/></span></span></p>
<p><span><span>C: 是否就<span><span> </span>Replit、s.cycu.org 與 localhost</span><span><span> </span>情境下對個人與分組倉儲進行設定操作:幾乎都用Replit來練習</span></span></span></p>
<p><span><span><span></span></span></span></p>
<p><span><span>D: 是否完成<a href="https://mde.tw/cpnote/content/%E4%B8%8A%E8%AA%B2%E5%85%A7%E5%AE%B9.html">上課內容</a><span>中的 Exercises:有</span></span></span></p>
<p><span><span><span></span></span></span></p>
<p><span><span>E: 是否完成 <a href="https://mde.tw/cpnote/content/w2-w5.html">w2-w5</a><span><span> </span>週任務中的 Exercises:有</span></span></span></p>
<p><span><span><span></span></span></span></p>
<p><span><span>F: 是否完成 <a href="https://mde.tw/cpnote/content/w6-w7.html">w6-w7</a><span><span> </span>週任務中的練習一與練習二:有</span></span></span></p>
<p><span><span><span></span></span></span></p>
<p><span><span>G: 是否完成 C 結合 gd 繪圖程式庫, 畫出 <a href="https://en.wikipedia.org/wiki/Flag_of_China">PROC</a><span>(</span><a href="https://en.wikipedia.org/wiki/Flag_of_China#/media/File:Flag_of_China_(construction_sheet).svg">規格</a><span>),<span> </span></span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom">United Kingdom</a><span>(</span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom#/media/File:Flag_of_the_United_Kingdom_(1-2)_(construction_sheet).svg">規格</a><span>),<span> </span></span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan">Japan</a><span>(</span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan#/media/File:Construction_sheet_of_the_Japanese_flag_EN.svg">規格</a><span>)與<span> </span></span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea">South Korea</a><span>(</span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg">規格</a><span>) Flags:有</span></span></span></p>
<p><span><span><span></span></span></span></p>
<p><span><span>H: 是否完成 w16 Final Pr</span></span><span><span>oject:有 </span></span></p>
<p></p>
<p></p>
<p></p>
<h1>Brython</h1>
<p><a href="https://en.wikipedia.org/wiki/Python_(programming_language)">https://en.wikipedia.org/wiki/Python_(programming_language)</a></p>
<h4>Examples:</h4>
<p style="padding-left: 30px;"><a href="https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d">https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d</a></p>
<p style="padding-left: 30px;"><a href="https://www.geeksforgeeks.org/python-programming-examples/">https://www.geeksforgeeks.org/python-programming-examples/</a></p>
<p style="padding-left: 30px;"><a href="https://www.programiz.com/python-programming/examples">https://www.programiz.com/python-programming/examples</a></p>
<p style="padding-left: 30px;"><a href="https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/">https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/</a></p>
<h4>Python Tutorial:</h4>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/">https://docs.python.org/3/tutorial/</a></p>
<p style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/introduction.html">An informal introduction to Python</a></p>
<h4>Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍)</h4>
<h4>Variables (<a href="https://github.com/python/cpython/blob/3.11/Lib/keyword.py">Python Keywords</a>)</h4>
<h4>Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解)</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#numbers">Numbers</a> (整數 int(), 浮點數 float())</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#strings">Strings</a> (字串)</h4>
<h4>print (Python 內建函式, <a href="https://docs.python.org/3/library/functions.html#print">print()</a> 函式)</h4>
<p><a href="https://docs.python.org/3/tutorial/controlflow.html">Python control flow tools</a></p>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#for-statements">for</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#if-statements">if</a></h4>
<h4 style="padding-left: 30px;"><a href="https://docs.python.org/3/tutorial/controlflow.html#the-range-function">range</a></h4>
<h4>open</h4>
<h4>read</h4>
<h4><a href="https://docs.python.org/3/tutorial/introduction.html#lists">lists</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences">tuples</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/datastructures.html#dictionaries">dictionaries</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#defining-functions">functions</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/errors.html#exceptions">try ... except</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements-and-else-clauses-on-loops">break</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/controlflow.html#pass-statements">pass</a></h4>
<h4><a href="https://docs.python.org/3/tutorial/classes.html?highlight=classes">classes</a></h4>
<p>這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 (<a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件).</p>
<p><a href="/downloads/practice_html.txt">practice_html.txt</a> 動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用.</p>
<p>亦即將所有對應的 html 也使用 Brython 產生, 然後寫為 <a href="https://docs.python.org/3/tutorial/classes.html">class</a> 後, 在範例導入時透過 <a href="https://docs.python.org/3/tutorial/classes.html#instance-objects">instance</a> 引用.</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;!-- 啟動 Brython --&gt;
&lt;script&gt;
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
&lt;/script&gt;</pre>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<p>將 iterable 與 iterator <a href="https://home.gamer.com.tw/creationDetail.php?sn=4337438">相關說明</a>, 利用 Brython 與 Ace Editor 整理在這個頁面.</p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>